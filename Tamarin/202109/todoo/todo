### 27/7
    add nonoce check at server
    knox v2: secret leaked by repacked app only
    keep https connection only (private channel only)
KnoxV2:
    leak secret via repack app only. keep blob leaked and write lemma to cecek leakae.
SafetyNet > 
    add maleware process that inject secureworld from private cannel with fake stuff.
    repack app can leak secret at te end
    
### 6/7
    change !Device


### 14/7
remove server create
fix !Device
simpliefd hash
remove app session

### 19/7

concept for certficate chaining
//create_self_signed_certficate(x.1) = sign(pk(x.1),x.1),
//verify_self_signed_certficate(sign(pk(x.1),x.1),pk(x.1)) = true,

create_self_signed_certficate(x.1) = <pk(x.1), sign(pk(x.1),x.1) >,
verify_self_signed_certficate(<pk(x.1), sign(pk(x.1),x.1) >,pk(x.1)) = true,

create_chain_signed_certficate(x.1,x.2) = <pk(x.2), sign(pk(x.2),x.1) >,
verify_chain_signed_certficate(<pk(x.2), sign(pk(x.2),x.1) >,pk(x.1)) = true,

create_certficate(x.1,x.2) = <pk(x.2), sign(pk(x.2),x.1) >,
    verify_certficate(<pk(x.2), sign(pk(x.2),x.1) >,pk(x.1)) = true


//simple version

    //Simple version
    //create_certficate(x.2,x.3,x.1) = < pk(x.2),x.3, sign(<pk(x.2),x.3>,x.1) >,
    //verify_certficate( < pk(x.2),x.3, sign(<pk(x.2),x.3>,x.1) > , <pk(x.1), x.4,x.5>) = true

# 
-apk data should be fresh
-  Get developer key as presitent rule
- trace of creating app bind by developer, app info Fr(pkg+appcontent), out
- repacke app using   In(DebugKey), Fr(ReapckedApp), !App()