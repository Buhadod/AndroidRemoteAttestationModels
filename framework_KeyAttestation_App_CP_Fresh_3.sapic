/*******************************************************************************
	Remote attestation Framework
	AUTHORS
	
	
*******************************************************************************/

theory Framework_KeyAttestation_App_Nonce
begin

builtins: signing, asymmetric-encryption

functions: check_rep/2,  get_rep/1, rep/2 [private], create_certificate/3, verify_certificate/2 , get_tbsInfo_certificate/1

equations:
    check_rep(rep(x.1, x.2), x.2) = true,
    get_rep(rep(x.1, x.2)) = x.1,

    create_certificate(SubjectTBSCertificateInfo,SubjectPup,IssuerSk) 
      = < SubjectTBSCertificateInfo, SubjectPup, sign(<SubjectTBSCertificateInfo, SubjectPup>,IssuerSk) >,

    verify_certificate( 
    < SubjectTBSCertificateInfo, pk(SubjectSk), sign(<SubjectTBSCertificateInfo, pk(SubjectSk)>,IssuerSk) >
     , < IssuerTBSCertificateInfo, pk(IssuerSk), sign(<IssuerTBSCertificateInfo, pk(IssuerSk)>,IssuerRootSk) >
          ) = true,

    get_tbsInfo_certificate( 
        < SubjectTBSCertificateInfo, pk(SubjectSk), sign(<SubjectTBSCertificateInfo, pk(SubjectSk)>,IssuerSk) >
          ) = SubjectTBSCertificateInfo
      


/***************************************** Generic *****************************************/

let KeyApp = 
    [Nonce_Sent(devId,nonce)]--[]-> [];

	event NonceRecieved(nonce);

	new ~bid;
	//attestation_agent send app data to secure world to start an attestation
	[]--[]-> [TOSW(~apid,~bid,~deviceId,swId,nonce,packagename,content,appSignature)];
	[TOAPP(~apid,~bid,<secret,signature>,verify(signature,secret,secretPk))]--[]->[];

	event SecretReceivedApp(secret);
	//event SecretReceivedValidApp(secret);
	event SecretReceivedAppStatus(secret,'valid');

	0

let HonestAppInstalltion =
	event Checked('HonestAppInstalltion');
	//install an application
	[!App_Published(devId,packagename,content,appSignature,secretPk)]--[]-> [];

	event Application_Installed(~deviceId,packagename,content,appSignature);

	!KeyApp

let ArbitraryApp =
    //receive a nonce
	in(nonce);

	event NonceRecieved(nonce);

	new ~bid;
	//attestation_agent send app data to secure world to start an attestation
	[]--[]-> [TOSW(~apid,~bid,~deviceId,swId,nonce,packagename,content,appSignature)];
	[TOAPP(~apid,~bid,<secret,signature>,true)]--[]->[]; //no need to check verfication here, because it is ArbitraryApp

	event SecretReceivedApp(secret);
	event SecretReceivedAppStatus(secret,'invalid');
	//leak secret
	//out(secret);
	0


let ArbitraryAppInstalltion =
	event Checked('ArbitraryAppInstalltion');
	//install an application
	in(<packagename,content>);
	new ~hash;
	let appSignature = ~hash in

	in(secretPk);

	event Application_Installed(~deviceId,packagename,content,appSignature);

    !ArbitraryApp
	

let AppInstallation =
	new ~apid;
	(HonestAppInstalltion + ArbitraryAppInstalltion)

let Device =

	//Create device reference
	new ~deviceId;

	//send the device refernece , allows an advsery to tamper the device
	out(~deviceId);
	
	let status = 'valid' in
	//setup a secureWorld
	[]--[]-> [SetUPSW(~deviceId,status)];
	[FinishSetUPSW(~deviceId,swId)]--[]->[];
	event A_finished();

	!AppInstallation


/***************************************** Knox V3 *****************************************/

let AtServerKA =
	new ~rootSk;
	let rootCertificate = create_certificate('TbsInfo',pk(~rootSk),~rootSk) in

	//share root certficate	
	[]--[]->
	[
		!RequestCreatingIntermediateCertificate(~rootSk,rootCertificate),
		!GetRootCertificate(rootCertificate)
	];

	!(
		event T_finish() 
	)

let UnlockBootloader =
	[SetUPSW(deviceId,status)]--[]->[];
	if not(status = 'invalid') then
		[]--[]->[SetUPSW(deviceId,'invalid')];
		0

let KeyMasterTA =

	new ~swId;

	//setup a Secureworld
	[SetUPSW(deviceId,status)]--[]->[FinishSetUPSW(deviceId,~swId)];
	
	//retrieve an adversary's attempt to compomised the device
	in(customSoftwareMeasurement);
	
	//Request attestation server
	[!RequestCreatingIntermediateCertificate(rootSk,rootCertificate)]--[]->[];
	
	//Create keymaster certficate
	new ~keymasterSk;
	let  intermediateCertificate = create_certificate('TbsKeyStoreInfo',pk(~keymasterSk),rootSk) in

	!(
		//attestation_agent send app data to secure world, start an attestation
		[TOSW(apid, bid,deviceId,~swId,nonce,packagename,content,appSignature)]--[]->[];

		new ~key;

		new ~atId;
		event Attestating_App(~atId,packagename,appSignature,deviceId);

		let hardwareMeasurement = status in
		let softwareMeasurement = customSoftwareMeasurement in
		let subjectCertificate = create_certificate(<~atId,hardwareMeasurement,nonce,packagename,appSignature,deviceId>,pk(~key),~keymasterSk) in
		let certificateChain = <subjectCertificate, intermediateCertificate, rootCertificate> in 
		//send attestation report to the app
		event DeviceStatus(~atId,deviceId,hardwareMeasurement);
		event CreateCert(certificateChain);
		out(certificateChain);
		event S_finish();

		in(aenc(<secret,signature>,pk(~key)));
		event SecretReceived(secret);
		event SecretReceivedatDevice(secret,hardwareMeasurement);
		[]--[]->[TOAPP(apid,bid,<secret,signature>,true)];

		0
			
	)


let DevServerKA =

	//creating and publising the application
	new ~advk;
	new ~content;
	new ~packagename;
	let appSignature = sign(~advk, <~packagename,~content>) in
	let app = <~packagename,~content,appSignature> in
	out(app);
	event App_Created(~packagename,appSignature);

	//secret verfication key
	new ~secretSk;
	out(pk(~secretSk));

	new ~devId;
	[]--[]-> [!App_Published(~devId,~packagename,~content,appSignature,pk(~secretSk))];
	!(
	
		// create a nonce
		new ~nonce;
		event NonceGenerated(~nonce);
        new ~requestID;
        event RequestCert(~requestID);
		[]--[]-> [Nonce_Sent(~devId,~nonce)];
		out(~nonce);
		
		//retrieve blob from clients
		in(<<<atId,hardwareMeasurement,~nonce,fpackagename,fappSignature,deviceId>,subjectPk,subjectChain>, intermediateCertificate, rootCertificate>);
		let subjectTbs = <atId,hardwareMeasurement,~nonce,fpackagename,fappSignature,deviceId> in
		let subjectCertificate = <subjectTbs,subjectPk,subjectChain> in
		[!GetRootCertificate(rootCertificate)]--[]->[];

		let verification1 = verify_certificate(subjectCertificate, intermediateCertificate) in
		let verification2 = verify_certificate(intermediateCertificate, rootCertificate) in
		//let verification3 = verify_certificate(rootCertificate, rootCertificate) in

		//generate secret
		new ~secret;
		let signature = sign(~secret,~secretSk) in 
		let cipher = aenc(<~secret,signature>, subjectPk) in
		

		//attestation finished	
		if(verification1 = verification2) & (verification1 = true) then	
			if (appSignature = fappSignature) & (~packagename = fpackagename) then
				event AcceptCert(~requestID,<subjectCertificate, intermediateCertificate, rootCertificate>);
				event Verdict_app(atId,deviceId,hardwareMeasurement,'valid');
				event SecretGenerated(~secret, cipher);
				out(cipher);
				event D_finish() 
			else
				event Verdict_app(atId,deviceId,hardwareMeasurement,'invalid');
				event D_finish() 
				


	)

/*************************************** Generic code *************************************************/
	
// Main process starts here

/***************************************** choose a platofrm ***************************************************
* platform				|		SafetyNet			|		KnoxV2		|	KnoxV3			|	Key Attestation
* --------------------------------------------------------------------------------------------------------------
* AttestationAgent		: GooglePlay | SafetyNetTA	|	KnoxV2TA		|	KnoxV3TA		|	KeyMasterTA
* AtServer				:		AtServerSN			|	AtServerKV2		|	AtServerKV3		|	AtServerKA
* DevServer				:		DevServerSN			|	DevServerKV2	|	DevServerKV3	|	DevServerKA
***************************************************************************************************************/


let AttestationAgent =
	KeyMasterTA

let AtServer = 
	AtServerKA

let DevServer = 
	DevServerKA




//create pair attetsation keys to be used by secreworld for sigining, and attestation server for verfication
new ~skAT;

(!Device || !DevServer || AtServer || !AttestationAgent || UnlockBootloader)


lemma CertPossible:
  exists-trace 
    "Ex requestID subjectCertificate intermediateCertificate rootCertificate #i #j.
        (AcceptCert(requestID,<subjectCertificate, intermediateCertificate, rootCertificate>) @i
        & RequestCert(requestID)@j) & #j < #i "


lemma CertFresh:
    "All requestID subjectCertificate intermediateCertificate rootCertificate #i.
        AcceptCert(requestID,<subjectCertificate, intermediateCertificate, rootCertificate>) @i
            ==>   Ex #j. RequestCert(requestID)@j
			    & Ex #k. CreateCert (<subjectCertificate, intermediateCertificate, rootCertificate>)@k
			    & #j < #k & #k < #i" 


// for all valid attestation => (device must be not rooted and app must be not repacked).
lemma DeviceAndAppIntegrity:
	"(All atId deviceId #i. Verdict_app(atId,deviceId,'valid','valid') @ i ==> 
	( 
	(Ex #j. DeviceStatus(atId,deviceId,'valid') @ j & j < i) 
	& (Ex packagename appSignature #j #k. 
			 App_Created(packagename,appSignature) @ j 
			 & Attestating_App(atId,packagename,appSignature,deviceId)@ k)
	))"


// for all failed application integrity check only  => (device must be valid and there an app created, an app attested and either the hash is different or packagename).
lemma RepackedAppIntegrity:
	"(All atId deviceId #i. Verdict_app(atId,deviceId,'valid','invalid') @ i ==> 
	( 
	(Ex #j. DeviceStatus(atId,deviceId,'valid') @ j & j < i) 
	& (Ex packagename fpackagename appSignature fappSignature #j #k. 
			 App_Created(packagename,appSignature) @ j 
			 & Attestating_App(atId,fpackagename,fappSignature,deviceId)@ k
			 & (
					(not(appSignature = fappSignature))
					| (not(packagename = fpackagename))
			 	)
			 
		)
	))"

lemma UniqueNonce:
	"All n #i #j. NonceGenerated(n) @i & NonceGenerated(n) @j ==> #i=#j"
	
lemma CorrectnessValidSecret:
exists-trace
	"Ex secret cipher #i #j #k. SecretGenerated(secret,cipher) @i & SecretReceivedatDevice(secret,'valid')@j & SecretReceivedAppStatus(secret,'valid')@k & (#i<#j) & (#j<#k)"

// lemma SecretIntegrity: 
// 	all-traces 
// 	 "All secret cipher #i. SecretGenerated(secret,cipher) @i ==> 
// 	 (not (Ex #j. KU(secret)@j)) | (not (Ex #j.SecretReceivedatDevice(secret,'invalid')@j))"

// lemma CorrectSecret:
// 	exists-trace
// 		"Ex secret cipher #i #j #k. SecretGenerated(secret,cipher) @i & SecretReceived(secret) @j & SecretReceivedApp(secret)@k"

lemma SecretIntegrity:
	exists-trace
		"not(Ex secret cipher #i #k. SecretGenerated(secret,cipher) @i & KU(secret)@k)"

// lemma SecretIntegrity:
// 	all-traces
// 	"All secret #i. SecretGenerated(secret,cipher) @i ==>
// 	(
// 		not(Ex #k1 #k2. KU(secret) @k1 | SecretReceivedAppStatus(secret,'invalid') @k2)
// 	)"

//Sanity check: Attestation finished
lemma Correctness_Both_Valid:
exists-trace
	"Ex atId deviceId #i. Verdict_app(atId,deviceId,'valid','valid') @ i"

//Sanity check: Attestation finished
lemma Correctness_Rooting_Device:
exists-trace
	"Ex atId any deviceId #i. Verdict_app(atId,deviceId,'invalid',any) @ i"


lemma Correctness_TV:
exists-trace
	"Ex #i. Checked('HonestAppInstalltion') @ i"

lemma Correctness_TI:
exists-trace
	"Ex #i. Checked('ArbitraryAppInstalltion') @ i"
	
end

// 	 Sun 21 Aug 2022 07:50:14 PM +03
// 	 CertPossible (exists-trace): analysis incomplete (1 steps)
//   CertFresh (all-traces): analysis incomplete (1 steps)
//	 DeviceAndAppIntegrity (all-traces): verified (82 steps)
//	 RepackedAppIntegrity (all-traces): verified (162 steps)
//   UniqueNonce (all-traces): analysis incomplete (1 steps)
//	 CorrectnessValidSecret (exists-trace): verified (19 steps)
//   CorrectSecret (exists-trace): analysis incomplete (1 steps)
//   CorrectSecretKU (exists-trace): analysis incomplete (1 steps)
//   Correctness_Both_Valid (exists-trace): analysis incomplete (1 steps)
//   Correctness_Rooting_Device (exists-trace): analysis incomplete (1 steps)
//   Correctness_TV (exists-trace): analysis incomplete (1 steps)
//   Correctness_TI (exists-trace): analysis incomplete (1 steps)
