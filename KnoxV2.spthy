theory KnoxV2
begin

builtins: asymmetric-encryption, signing

/* We formalize the following protocol

    1. Vender -> Developer   : N_v
    2. Developer -> App      : N_v
    3. App -> SecWorld       : N_v
    4. SecWorld -> App       : Stmt = <N_s, measurement, deviceID>, E_venderPubKey(Sign_secWorldSignKey(Stmt),Stmt) i.e (blob)
    5. App -> Developer      : blob, N_s, apikey
    6. Developer -> Vender   : blob, N_s
    7. Vender -> Developer   : stmt
    8. Developer -> App      : secret
*/

/*
  Assumiption:
  

*/

/* Set up rules */
rule CreateVender:
  [ 
    Fr(~venderPrivKey)
  ]
  --[ ]->
  [
    !VenderKeys(~venderPrivKey, pk(~venderPrivKey)),
    !VenderInfo(pk(~venderPrivKey))
  ]

rule VenderComprimse:
  [ 
    !VenderKeys(venderPrivKey, venderPubKey)
  ]
  --[ VenderComprimsed(venderPubKey) ]->
  [
    Out(<venderPrivKey, venderPubKey>)
  ]

rule CreateDevice:
  [ 
    Fr(~deviceID), Fr(~secWorldSignKey),
    !VenderKeys(venderPrivKey, venderPubKey)
  ]
  --[ ]->
  [
    !SecureWorldInfo(~deviceID,venderPubKey,~secWorldSignKey),
    !VenderDevicesInfo(venderPrivKey, venderSignKey, ~secWorldSignKey, ~deviceID) 
  ]

rule SecWorldComprimse:
  [ 
    !SecureWorldInfo(deviceID,venderPubKey,~secWorldSignKey)
  ]
  --[ SecWorldComprimsed(deviceID) ]->
  [
    Out(<deviceID>)
  ]

  rule CreateDeveloper:
  [ 
    Fr(~apiKey),
    !VenderInfo(venderPupKey)
  ]
  --[ ]->
  [
    !DeveloperInfo(venderPupKey, ~apiKey),
    !VenderInfo(venderPupKey, ~apiKey)
  ]

rule DevComprimse:
  [ 
    !DeveloperInfo(secret)
  ]
  --[ DevComprimsed(secret) ]->
  [
    Out(<secret>)
  ]


  rule CreateApp:
  [
    Fr(~appSHA), Fr(~secret),
    !DeveloperInfo(venderPupKey, apiKey)
  ]
  --[ ]->
  [
    !AppInfo(~appSHA,~secret, apiKey)
  ]

/* Installation rules*/

rule Install_App_in_Device
  [
    !AppInfo(appSHA,secret, apiKey),
    !SecureWorldInfo(deviceID,venderPubKey,secWorldSignKey)
  ]
  --[ Install_App_in_Device(appSHA,secret, apiKey, deviceID)]->
  [
      !AppInfo(appSHA, apiKey, deviceID)
  ]


/* Protocol rules*/
rule Ven_to_Dev_1:
    [
      Fr(~nv),
      !VenderInfo(venderPupKey, apiKey)
    ]
  --[ 
       St_Vendor_to_Developer(~nv, apiKey)
    ]->
    [ 
      Out( <~nv, apiKey> ),
      !Vendor_to_Developer(~nv, apiKey)
    ]

rule Dev_to_App_2:
    [
      In(<nv, apiKey>),
      !DeveloperInfo(apiKey)
    ]
  --[ 
      St_Developer_to_App(nv, apiKey)
    ]->
    [ 
      Out( <nv,apiKey> ),
      !Developer_to_App(nv,apiKey)
    ]

rule App_to_SecWorld_3:
    [
      In(<nv,apiKey>),
      !AppInfo(appSHA, apiKey, deviceID)
    ]
  --[ 
      St_App_to_SecWorld(nv, appSHA, apiKey, deviceID)
    ]->
    [ 
      !Out_App_to_SecWorld(nv, appSHA, deviceID),
      !AppInfo_2(nv, appSHA, apiKey)
    ]

rule SecWorld_to_App_4:
    
    let blob = aenc(sign (<'NotRooted',nv, deviceID>,secWorldSignKey), venderPubKey)

    in
    [
      !Out_App_to_SecWorld(nv, appSHA, deviceID),
      !SecureWorldInfo(deviceID,venderPubKey,secWorldSignKey)
    ]
  --[ 
      St_SecWorld_to_App(blob)
    ]->
    [ 
      !SecWorld_to_App(blob)
    ]

rule App_to_Dev_5:
    [
      !SecWorld_to_App(blob),
      !AppInfo_2(nv, appSHA, apiKey)
    ]
  --[ 
      St_App_to_Dev(nv, blob, appSHA,apiKey)
    ]->
    [ 
      Out(<blob, nv, apiKey>),
      App_to_Dev(blob, nv, apiKey)
    ]

rule Dev_to_Ven_6:
    [
      In(<blob, nv, apiKey>),
      !Developer_to_App(nv,apiKey)
    ]
  --[ 
      St_App_to_Dev(nv, blob,apiKey)
    ]->
    [ 
      Out(<blob, nv, apiKey>),
      Dev_to_Ven(blob, nv, apiKey)
    ]

rule Ven_to_Dev_7:
    
    let blob = aenc(sign (<'NotRooted',nv, deviceID>,secWorldSignKey), venderPubKey)

    in
    [
      In(<blob, nv, apiKey>),
      !Vendor_to_Developer(nv, apiKey),
      !VenderInfo(venderPubKey, apiKey)
      !VenderKeys(venderPrivKey, venderPubKey),
      !VenderDevicesInfo(venderPrivKey, venderSignKey, secWorldSignKey, deviceID) 
    ]
  --[ 
      St_Ven_to_Dev('NotRooted',blob, nv, deviceID)
    ]->
    [ 
      Out(<'NotRooted',nv, deviceID, apiKey>)
    ]

rule Dev_to_App_8:
    [
      In(<'NotRooted',nv, deviceID, apiKey>),
      !Developer_to_App(nv,apiKey),
      !AppInfo(appSHA,secret, apiKey)
      !DeveloperInfo(venderPupKey, apiKey)
    ]
  --[ 
      St_Dev_to_App(nv, blob, apiKey, secret)
    ]->
    [ 
      Out(<secret,apiKey>)
    ]


lemma executable:
  exists-trace 
  " Ex #i nv blob apikey secret.
      St_Dev_to_App(nv, blob, apiKey, secret) @ i "

end