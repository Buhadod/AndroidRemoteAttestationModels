theory Framework_SafetyNetSW begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, check_rep/2, create_certificate/3,
           fst/1, get_rep/1, get_tbsInfo_certificate/1, pair/2, pk/1,
           rep/2 [private], sign/2, snd/1, true/0, verify/3,
           verify_certificate/2
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    check_rep(rep(x.1, x.2), x.2) = true,
    create_certificate(SubjectTBSCertificateInfo, SubjectPup, IssuerSk)
  = <SubjectTBSCertificateInfo, SubjectPup, 
     sign(<SubjectTBSCertificateInfo, SubjectPup>, IssuerSk)>,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(x.1, x.2)) = x.1,
    get_tbsInfo_certificate(<SubjectTBSCertificateInfo, pk(SubjectSk), 
                             sign(<SubjectTBSCertificateInfo, pk(SubjectSk)>, IssuerSk)>)
  = SubjectTBSCertificateInfo,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true,
    verify_certificate(<SubjectTBSCertificateInfo, pk(SubjectSk), 
                        sign(<SubjectTBSCertificateInfo, pk(SubjectSk)>, IssuerSk)>,
                       <IssuerTBSCertificateInfo, pk(IssuerSk), 
                        sign(<IssuerTBSCertificateInfo, pk(IssuerSk)>, IssuerRootSk)>)
  = true

heuristic: p

lemma DeviceAndAppIntegrity:
  all-traces
  "∀ atId deviceId #i.
    (Verdict_app( atId, deviceId, 'valid', 'valid' ) @ #i) ⇒
    ((∃ #j.
       (DeviceStatus( atId, deviceId, 'valid' ) @ #j) ∧ (#j < #i)) ∧
     (∃ packagename appSignature #j #k.
       (App_Created( packagename, appSignature ) @ #j) ∧
       (Attestating_App( atId, packagename, appSignature, deviceId
        ) @ #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ atId deviceId #i.
  (Verdict_app( atId, deviceId, 'valid', 'valid' ) @ #i)
 ∧
  ((∀ #j.
     (DeviceStatus( atId, deviceId, 'valid' ) @ #j) ⇒ ¬(#j < #i)) ∨
   (∀ packagename appSignature #j #k.
     (App_Created( packagename, appSignature ) @ #j) ∧
     (Attestating_App( atId, packagename, appSignature, deviceId ) @ #k)
    ⇒
     ⊥))"
*/
simplify
solve( (∀ #j.
         (DeviceStatus( atId, deviceId, 'valid' ) @ #j) ⇒ ¬(#j < #i))  ∥
       (∀ packagename appSignature #j #k.
         (App_Created( packagename, appSignature ) @ #j) ∧
         (Attestating_App( atId, packagename, appSignature, deviceId ) @ #k)
        ⇒
         ⊥) )
  case case_1
  solve( Verdict_app( atId, deviceId, 'valid', 'valid' ) @ #i )
    case eventVerdictappatIddeviceIdmeasurementvalid_0_11211111111111111111112
    solve( state_11211111111111111111112( ~advk, ~content, ~devId,
                                          ~nonce, ~packagename, ~sid, ~skAT, atId, blob, deviceId,
                                          fappSignature, fpackagename, 'valid'
           ) ▶₀ #i )
      case ifsignadvkpackagenamecontentfappSignaturepackagenamefpackagename_1_1121111111111111111111_case_1
      solve( SetUPSW( ~deviceId, status ) ▶₁ #vr.58 )
        case SetUPSWdeviceIdvalid_0_11111
        SOLVED // trace found
      qed
    qed
  qed
qed

lemma RepackedAppIntegrity:
  all-traces
  "∀ atId deviceId #i.
    (Verdict_app( atId, deviceId, 'valid', 'invalid' ) @ #i) ⇒
    ((∃ #j.
       (DeviceStatus( atId, deviceId, 'valid' ) @ #j) ∧ (#j < #i)) ∧
     (∃ packagename fpackagename appSignature fappSignature #j #k.
       ((App_Created( packagename, appSignature ) @ #j) ∧
        (Attestating_App( atId, fpackagename, fappSignature, deviceId
         ) @ #k)) ∧
       ((¬(appSignature = fappSignature)) ∨
        (¬(packagename = fpackagename)))))"
/*
guarded formula characterizing all counter-examples:
"∃ atId deviceId #i.
  (Verdict_app( atId, deviceId, 'valid', 'invalid' ) @ #i)
 ∧
  ((∀ #j.
     (DeviceStatus( atId, deviceId, 'valid' ) @ #j) ⇒ ¬(#j < #i)) ∨
   (∀ packagename fpackagename appSignature fappSignature #j #k.
     (App_Created( packagename, appSignature ) @ #j) ∧
     (Attestating_App( atId, fpackagename, fappSignature, deviceId
      ) @ #k)
    ⇒
     (appSignature = fappSignature) ∧ (packagename = fpackagename)))"
*/
simplify
solve( (∀ #j.
         (DeviceStatus( atId, deviceId, 'valid' ) @ #j) ⇒ ¬(#j < #i))  ∥
       (∀ packagename fpackagename appSignature fappSignature #j #k.
         (App_Created( packagename, appSignature ) @ #j) ∧
         (Attestating_App( atId, fpackagename, fappSignature, deviceId
          ) @ #k)
        ⇒
         (appSignature = fappSignature) ∧ (packagename = fpackagename)) )
  case case_1
  solve( Verdict_app( atId, deviceId, 'valid', 'invalid' ) @ #i )
    case eventVerdictappatIddeviceIdmeasurementinvalid_0_11211111111111111111111
    solve( state_11211111111111111111111( ~advk, ~content, ~devId,
                                          ~nonce, ~packagename, ~sid, ~skAT, atId, blob, deviceId,
                                          fappSignature, fpackagename, 'valid'
           ) ▶₀ #i )
      case ifsignadvkpackagenamecontentfappSignaturepackagenamefpackagename_0_1121111111111111111111_case_1
      solve( SetUPSW( ~deviceId, status ) ▶₁ #vr.58 )
        case SetUPSWdeviceIdvalid_0_11111
        solve( !KU( ~nonce ) @ #vk.2 )
          case outnonce_0_11211111111111111
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

lemma UniqueNonce:
  all-traces
  "∀ n #i #j.
    ((NonceGenerated( n ) @ #i) ∧ (NonceGenerated( n ) @ #j)) ⇒
    (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ n #i #j.
  (NonceGenerated( n ) @ #i) ∧ (NonceGenerated( n ) @ #j)
 ∧
  ¬(#i = #j)"
*/
simplify
solve( (#i < #j)  ∥ (#j < #i) )
  case case_1
  solve( state_112111111111111( ~advk, ~content, ~devId, ~nonce,
                                ~packagename, ~skAT
         ) ▶₀ #i )
    case newnonce_0_11211111111111
    solve( state_112111111111111( ~advk.1, ~content.1, ~devId.1,
                                  ~nonce, ~packagename.1, ~skAT.1
           ) ▶₀ #j )
      case newnonce_0_11211111111111
      by contradiction /* cyclic */
    qed
  qed
next
  case case_2
  solve( state_112111111111111( ~advk, ~content, ~devId, ~nonce,
                                ~packagename, ~skAT
         ) ▶₀ #i )
    case newnonce_0_11211111111111
    solve( state_112111111111111( ~advk.1, ~content.1, ~devId.1,
                                  ~nonce, ~packagename.1, ~skAT.1
           ) ▶₀ #j )
      case newnonce_0_11211111111111
      by contradiction /* cyclic */
    qed
  qed
qed

lemma Correctness_Both_Valid:
  exists-trace
  "∃ atId deviceId #i.
    Verdict_app( atId, deviceId, 'valid', 'valid' ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ atId deviceId #i.
  (Verdict_app( atId, deviceId, 'valid', 'valid' ) @ #i)"
*/
simplify
solve( Verdict_app( atId, deviceId, 'valid', 'valid' ) @ #i )
  case eventVerdictappatIddeviceIdmeasurementvalid_0_11211111111111111111112
  solve( state_11211111111111111111112( ~advk, ~content, ~devId,
                                        ~nonce, ~packagename, ~sid, ~skAT, atId, blob, deviceId,
                                        fappSignature, fpackagename, 'valid'
         ) ▶₀ #i )
    case ifsignadvkpackagenamecontentfappSignaturepackagenamefpackagename_1_1121111111111111111111_case_2
    SOLVED // trace found
  qed
qed

lemma Correctness_Rooting_Device:
  exists-trace
  "∃ atId any deviceId #i.
    Verdict_app( atId, deviceId, 'invalid', any ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ atId any deviceId #i.
  (Verdict_app( atId, deviceId, 'invalid', any ) @ #i)"
*/
simplify
solve( Verdict_app( atId, deviceId, 'invalid', any ) @ #i )
  case eventVerdictappatIddeviceIdmeasurementinvalid_0_11211111111111111111111
  solve( state_11211111111111111111111( ~advk, ~content, ~devId,
                                        ~nonce, ~packagename, ~sid, ~skAT, atId, blob, deviceId,
                                        fappSignature, fpackagename, 'invalid'
         ) ▶₀ #i )
    case ifsignadvkpackagenamecontentfappSignaturepackagenamefpackagename_0_1121111111111111111111
    solve( SetUPSW( ~deviceId, status ) ▶₁ #vr.58 )
      case SetUPSWdeviceIdvalid_0_11111
      solve( !KU( ~nonce ) @ #vk.2 )
        case outnonce_0_11211111111111111
        SOLVED // trace found
      qed
    qed
  qed
qed

lemma Correctness_TV:
  exists-trace "∃ #i. Checked( 'HonestAppInstalltion' ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ #i. (Checked( 'HonestAppInstalltion' ) @ #i)"
*/
simplify
solve( Checked( 'HonestAppInstalltion' ) @ #i )
  case eventCheckedHonestAppInstalltion_0_1111111111
  solve( state_111111111( ~deviceId, ~skAT, swId ) ▶₀ #i )
    case __1_11111111_case_1
    SOLVED // trace found
  qed
qed

lemma Correctness_TI:
  exists-trace "∃ #i. Checked( 'ArbitraryAppInstalltion' ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ #i. (Checked( 'ArbitraryAppInstalltion' ) @ #i)"
*/
simplify
solve( Checked( 'ArbitraryAppInstalltion' ) @ #i )
  case eventCheckedArbitraryAppInstalltion_0_1111111112
  solve( state_111111111( ~deviceId, ~skAT, swId ) ▶₀ #i )
    case __1_11111111_case_1
    SOLVED // trace found
  qed
qed

rule (modulo E) Init[color=#ffffff process=new ~skAT;]:
   [ ] --[ Init( ) ]-> [ state_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newskAT_0_[color=#ffffff process=new ~skAT;]:
   [ state_( ), Fr( ~skAT ) ] --> [ state_1( ~skAT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_1[color=#ffffff process=!]:
   [ state_1( ~skAT ) ] --> [ !semistate_11( ~skAT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_1[color=#ffffff process=!]:
   [ !semistate_11( ~skAT ) ] --> [ state_11( ~skAT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_11[color=#ffffff process=|]:
   [ state_11( ~skAT ) ]
  -->
   [ state_111( ~skAT ), state_112( ~skAT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newdeviceId_0_111[color=#708040 process=new ~deviceId;]:
   [ state_111( ~skAT ), Fr( ~deviceId ) ]
  -->
   [ state_1111( ~deviceId, ~skAT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outdeviceId_0_1111[color=#708040 process=out(~deviceId);]:
   [ state_1111( ~deviceId, ~skAT ) ]
  -->
   [ state_11111( ~deviceId, ~skAT ), Out( ~deviceId ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) SetUPSWdeviceIdvalid_0_11111[color=#708040 process= [ ] --> [ SetUPSW( ~deviceId, 'valid' ) ];]:
   [ state_11111( ~deviceId, ~skAT ) ]
  -->
   [ state_111111( ~deviceId, ~skAT ), SetUPSW( ~deviceId, 'valid' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) FinishSetUPSWdeviceIdswId_0_111111[color=#708040 process= [ FinishSetUPSW( ~deviceId, swId ) ] --> [ ];]:
   [
   state_111111( ~deviceId, ~skAT ), FinishSetUPSW( ~deviceId, swId )
   ]
  -->
   [ state_1111111( ~deviceId, ~skAT, swId ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventAfinished_0_1111111[color=#708040 process=event A_finished( );]:
   [ state_1111111( ~deviceId, ~skAT, swId ) ]
  --[ A_finished( ) ]->
   [ state_11111111( ~deviceId, ~skAT, swId ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_11111111[color=#708040 process=!]:
   [ state_11111111( ~deviceId, ~skAT, swId ) ]
  -->
   [ !semistate_111111111( ~deviceId, ~skAT, swId ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_11111111[color=#708040 process=!]:
   [ !semistate_111111111( ~deviceId, ~skAT, swId ) ]
  -->
   [ state_111111111( ~deviceId, ~skAT, swId ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventCheckedHonestAppInstalltion_0_1111111111[color=#714080 process=event Checked( 'HonestAppInstalltion' );]:
   [ state_111111111( ~deviceId, ~skAT, swId ) ]
  --[ Checked( 'HonestAppInstalltion' ) ]->
   [ state_11111111111( ~deviceId, ~skAT, swId ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) AppPublisheddevIdpackagenamecontentappSignature_0_11111111111[color=#714080 process= [ !App_Published( devId, packagename, content, appSignature ) ]
-->
 [ ];]:
   [
   state_11111111111( ~deviceId, ~skAT, swId ),
   !App_Published( devId, packagename, content, appSignature )
   ]
  -->
   [
   state_111111111111( ~deviceId, ~skAT, appSignature, content, devId,
                       packagename, swId
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventApplicationInstalleddeviceIdpackagenamecontentappSignature_0_111111111111[color=#714080 process=event Application_Installed( ~deviceId, packagename, content,
                       appSignature
);]:
   [
   state_111111111111( ~deviceId, ~skAT, appSignature, content, devId,
                       packagename, swId
   )
   ]
  --[
  Application_Installed( ~deviceId, packagename, content,
                         appSignature
  )
  ]->
   [
   state_1111111111111( ~deviceId, ~skAT, appSignature, content,
                        devId, packagename, swId
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) NonceSentdevIdnonce_0_1111111111111[color=#714080 process= [ Nonce_Sent( devId, nonce ) ] --> [ ];]:
   [
   state_1111111111111( ~deviceId, ~skAT, appSignature, content,
                        devId, packagename, swId
   ),
   Nonce_Sent( devId, nonce )
   ]
  -->
   [
   state_11111111111111( ~deviceId, ~skAT, appSignature, content,
                         devId, nonce, packagename, swId
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventNonceRecievednonce_0_11111111111111[color=#714080 process=event NonceRecieved( nonce );]:
   [
   state_11111111111111( ~deviceId, ~skAT, appSignature, content,
                         devId, nonce, packagename, swId
   )
   ]
  --[ NonceRecieved( nonce ) ]->
   [
   state_111111111111111( ~deviceId, ~skAT, appSignature, content,
                          devId, nonce, packagename, swId
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) TOSWdeviceIdswIdnoncepackagenamecontentappSignature_0_111111111111111[color=#714080 process= [ ]
-->
 [
 TOSW( ~deviceId, swId, nonce, packagename, content, appSignature )
 ];]:
   [
   state_111111111111111( ~deviceId, ~skAT, appSignature, content,
                          devId, nonce, packagename, swId
   )
   ]
  -->
   [
   state_1111111111111111( ~deviceId, ~skAT, appSignature, content,
                           devId, nonce, packagename, swId
   ),
   TOSW( ~deviceId, swId, nonce, packagename, content, appSignature )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_1111111111111111[color=#714080 process=0]:
   [
   state_1111111111111111( ~deviceId, ~skAT, appSignature, content,
                           devId, nonce, packagename, swId
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventCheckedArbitraryAppInstalltion_0_1111111112[color=#405180 process=event Checked( 'ArbitraryAppInstalltion' );]:
   [ state_111111111( ~deviceId, ~skAT, swId ) ]
  --[ Checked( 'ArbitraryAppInstalltion' ) ]->
   [ state_11111111121( ~deviceId, ~skAT, swId ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) inpackagenamecontent_0_11111111121[color=#405180 process=in(<packagename, content>);]:
   [
   state_11111111121( ~deviceId, ~skAT, swId ),
   In( <packagename, content> )
   ]
  -->
   [
   state_111111111211( ~deviceId, ~skAT, content, packagename, swId )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) newhash_0_111111111211[color=#405180 process=new ~hash;]:
   [
   state_111111111211( ~deviceId, ~skAT, content, packagename, swId ),
   Fr( ~hash )
   ]
  -->
   [
   state_1111111112111( ~deviceId, ~hash, ~skAT, content, packagename,
                        swId
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventApplicationInstalleddeviceIdpackagenamecontenthash_0_1111111112111[color=#405180 process=event Application_Installed( ~deviceId, packagename, content, ~hash );]:
   [
   state_1111111112111( ~deviceId, ~hash, ~skAT, content, packagename,
                        swId
   )
   ]
  --[ Application_Installed( ~deviceId, packagename, content, ~hash )
  ]->
   [
   state_11111111121111( ~deviceId, ~hash, ~skAT, content,
                         packagename, swId
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) innonce_0_11111111121111[color=#405180 process=in(nonce);]:
   [
   state_11111111121111( ~deviceId, ~hash, ~skAT, content,
                         packagename, swId
   ),
   In( nonce )
   ]
  -->
   [
   state_111111111211111( ~deviceId, ~hash, ~skAT, content, nonce,
                          packagename, swId
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventNonceRecievednonce_0_111111111211111[color=#405180 process=event NonceRecieved( nonce );]:
   [
   state_111111111211111( ~deviceId, ~hash, ~skAT, content, nonce,
                          packagename, swId
   )
   ]
  --[ NonceRecieved( nonce ) ]->
   [
   state_1111111112111111( ~deviceId, ~hash, ~skAT, content, nonce,
                           packagename, swId
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) TOSWdeviceIdswIdnoncepackagenamecontenthash_0_1111111112111111[color=#405180 process= [ ]
-->
 [ TOSW( ~deviceId, swId, nonce, packagename, content, ~hash ) ];]:
   [
   state_1111111112111111( ~deviceId, ~hash, ~skAT, content, nonce,
                           packagename, swId
   )
   ]
  -->
   [
   state_11111111121111111( ~deviceId, ~hash, ~skAT, content, nonce,
                            packagename, swId
   ),
   TOSW( ~deviceId, swId, nonce, packagename, content, ~hash )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_11111111121111111[color=#405180 process=0]:
   [
   state_11111111121111111( ~deviceId, ~hash, ~skAT, content, nonce,
                            packagename, swId
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_112[color=#ffffff process=!]:
   [ state_112( ~skAT ) ] --> [ !semistate_1121( ~skAT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_112[color=#ffffff process=!]:
   [ !semistate_1121( ~skAT ) ] --> [ state_1121( ~skAT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_1121[color=#ffffff process=|]:
   [ state_1121( ~skAT ) ]
  -->
   [ state_11211( ~skAT ), state_11212( ~skAT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_11211[color=#ffffff process=|]:
   [ state_11211( ~skAT ) ]
  -->
   [ state_112111( ~skAT ), state_112112( ~skAT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newadvk_0_112111[color=#805a40 process=new ~advk;]:
   [ state_112111( ~skAT ), Fr( ~advk ) ]
  -->
   [ state_1121111( ~advk, ~skAT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newcontent_0_1121111[color=#805a40 process=new ~content;]:
   [ state_1121111( ~advk, ~skAT ), Fr( ~content ) ]
  -->
   [ state_11211111( ~advk, ~content, ~skAT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newpackagename_0_11211111[color=#805a40 process=new ~packagename;]:
   [ state_11211111( ~advk, ~content, ~skAT ), Fr( ~packagename ) ]
  -->
   [ state_112111111( ~advk, ~content, ~packagename, ~skAT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outpackagenamecontentsignadvkpackagenamecontent_0_112111111[color=#805a40 process=out(<~packagename, ~content, sign(~advk, <~packagename, ~content>)>);]:
   [ state_112111111( ~advk, ~content, ~packagename, ~skAT ) ]
  -->
   [
   state_1121111111( ~advk, ~content, ~packagename, ~skAT ),
   Out( <~packagename, ~content, sign(~advk, <~packagename, ~content>)
        >
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventAppCreatedpackagenamesignadvkpackagenamecontent_0_1121111111[color=#805a40 process=event App_Created( ~packagename, sign(~advk, <~packagename, ~content>) );]:
   [ state_1121111111( ~advk, ~content, ~packagename, ~skAT ) ]
  --[
  App_Created( ~packagename, sign(~advk, <~packagename, ~content>) )
  ]->
   [ state_11211111111( ~advk, ~content, ~packagename, ~skAT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newdevId_0_11211111111[color=#805a40 process=new ~devId;]:
   [
   state_11211111111( ~advk, ~content, ~packagename, ~skAT ),
   Fr( ~devId )
   ]
  -->
   [
   state_112111111111( ~advk, ~content, ~devId, ~packagename, ~skAT )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) AppPublisheddevIdpackagenamecontentsignadvkpackagenamecontent_0_112111111111[color=#805a40 process= [ ]
-->
 [
 !App_Published( ~devId, ~packagename, ~content,
                 sign(~advk, <~packagename, ~content>)
 )
 ];]:
   [
   state_112111111111( ~advk, ~content, ~devId, ~packagename, ~skAT )
   ]
  -->
   [
   state_1121111111111( ~advk, ~content, ~devId, ~packagename, ~skAT
   ),
   !App_Published( ~devId, ~packagename, ~content,
                   sign(~advk, <~packagename, ~content>)
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_1121111111111[color=#805a40 process=!]:
   [
   state_1121111111111( ~advk, ~content, ~devId, ~packagename, ~skAT )
   ]
  -->
   [
   !semistate_11211111111111( ~advk, ~content, ~devId, ~packagename,
                              ~skAT
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_1121111111111[color=#805a40 process=!]:
   [
   !semistate_11211111111111( ~advk, ~content, ~devId, ~packagename,
                              ~skAT
   )
   ]
  -->
   [
   state_11211111111111( ~advk, ~content, ~devId, ~packagename, ~skAT
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) newnonce_0_11211111111111[color=#805a40 process=new ~nonce;]:
   [
   state_11211111111111( ~advk, ~content, ~devId, ~packagename, ~skAT
   ),
   Fr( ~nonce )
   ]
  -->
   [
   state_112111111111111( ~advk, ~content, ~devId, ~nonce,
                          ~packagename, ~skAT
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventNonceGeneratednonce_0_112111111111111[color=#805a40 process=event NonceGenerated( ~nonce );]:
   [
   state_112111111111111( ~advk, ~content, ~devId, ~nonce,
                          ~packagename, ~skAT
   )
   ]
  --[ NonceGenerated( ~nonce ) ]->
   [
   state_1121111111111111( ~advk, ~content, ~devId, ~nonce,
                           ~packagename, ~skAT
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) NonceSentdevIdnonce_0_1121111111111111[color=#805a40 process= [ ] --> [ Nonce_Sent( ~devId, ~nonce ) ];]:
   [
   state_1121111111111111( ~advk, ~content, ~devId, ~nonce,
                           ~packagename, ~skAT
   )
   ]
  -->
   [
   state_11211111111111111( ~advk, ~content, ~devId, ~nonce,
                            ~packagename, ~skAT
   ),
   Nonce_Sent( ~devId, ~nonce )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) outnonce_0_11211111111111111[color=#805a40 process=out(~nonce);]:
   [
   state_11211111111111111( ~advk, ~content, ~devId, ~nonce,
                            ~packagename, ~skAT
   )
   ]
  -->
   [
   state_112111111111111111( ~advk, ~content, ~devId, ~nonce,
                             ~packagename, ~skAT
   ),
   Out( ~nonce )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) inblob_0_112111111111111111[color=#805a40 process=in(blob);]:
   [
   state_112111111111111111( ~advk, ~content, ~devId, ~nonce,
                             ~packagename, ~skAT
   ),
   In( blob )
   ]
  -->
   [
   state_1121111111111111111( ~advk, ~content, ~devId, ~nonce,
                              ~packagename, ~skAT, blob
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) newsid_0_1121111111111111111[color=#805a40 process=new ~sid;]:
   [
   state_1121111111111111111( ~advk, ~content, ~devId, ~nonce,
                              ~packagename, ~skAT, blob
   ),
   Fr( ~sid )
   ]
  -->
   [
   state_11211111111111111111( ~advk, ~content, ~devId, ~nonce,
                               ~packagename, ~sid, ~skAT, blob
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) TOATsidblob_0_11211111111111111111[color=#805a40 process= [ ] --> [ TOAT( ~sid, blob ) ];]:
   [
   state_11211111111111111111( ~advk, ~content, ~devId, ~nonce,
                               ~packagename, ~sid, ~skAT, blob
   )
   ]
  -->
   [
   state_112111111111111111111( ~advk, ~content, ~devId, ~nonce,
                                ~packagename, ~sid, ~skAT, blob
   ),
   TOAT( ~sid, blob )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) FRATsidatIdmeasurementnoncefpackagenamefappSignaturedeviceId_0_112111111111111111111[color=#805a40 process= [
 FRAT( ~sid,
       <atId, measurement, ~nonce, fpackagename, fappSignature, deviceId>
 )
 ]
-->
 [ ];]:
   [
   state_112111111111111111111( ~advk, ~content, ~devId, ~nonce,
                                ~packagename, ~sid, ~skAT, blob
   ),
   FRAT( ~sid,
         <atId, measurement, ~nonce, fpackagename, fappSignature, deviceId>
   )
   ]
  -->
   [
   state_1121111111111111111111( ~advk, ~content, ~devId, ~nonce,
                                 ~packagename, ~sid, ~skAT, atId, blob, deviceId, fappSignature,
                                 fpackagename, measurement
   )
   ]

  /* has exactly the trivial AC variant */

restriction restr_ifsignadvkpackagenamecontentfappSignaturepackagenamefpackagename_0_1121111111111111111111_1:
  "∀ x #NOW x.1 x.2 x.3.
    (restr_ifsignadvkpackagenamecontentfappSignaturepackagenamefpackagename_0_1121111111111111111111_1( x,
                                                                                                        x.1,
                                                                                                        x.2,
                                                                                                        x.3
     ) @ #NOW) ⇒
    ((¬(x = x.1)) ∨ (¬(x.2 = x.3)))"
  // safety formula

rule (modulo E) ifsignadvkpackagenamecontentfappSignaturepackagenamefpackagename_0_1121111111111111111111[color=#805a40 process=if (¬(sign(~advk, <~packagename, ~content>) = fappSignature)) ∨
(¬(~packagename = fpackagename))]:
   [
   state_1121111111111111111111( ~advk, ~content, ~devId, ~nonce,
                                 ~packagename, ~sid, ~skAT, atId, blob, deviceId, fappSignature,
                                 fpackagename, measurement
   )
   ]
  --[
  restr_ifsignadvkpackagenamecontentfappSignaturepackagenamefpackagename_0_1121111111111111111111_1( sign(~advk,
                                                                                                          <
                                                                                                           ~packagename, 
                                                                                                           ~content
                                                                                                          >),
                                                                                                     fappSignature,
                                                                                                     ~packagename,
                                                                                                     fpackagename
  )
  ]->
   [
   state_11211111111111111111111( ~advk, ~content, ~devId, ~nonce,
                                  ~packagename, ~sid, ~skAT, atId, blob, deviceId, fappSignature,
                                  fpackagename, measurement
   )
   ]

  /* has exactly the trivial AC variant */

restriction restr_ifsignadvkpackagenamecontentfappSignaturepackagenamefpackagename_1_1121111111111111111111_1:
  "∀ x #NOW x.1 x.2 x.3.
    (restr_ifsignadvkpackagenamecontentfappSignaturepackagenamefpackagename_1_1121111111111111111111_1( x,
                                                                                                        x.1,
                                                                                                        x.2,
                                                                                                        x.3
     ) @ #NOW) ⇒
    (¬((¬(x = x.1)) ∨ (¬(x.2 = x.3))))"
  // safety formula

rule (modulo E) ifsignadvkpackagenamecontentfappSignaturepackagenamefpackagename_1_1121111111111111111111[color=#805a40 process=if (¬(sign(~advk, <~packagename, ~content>) = fappSignature)) ∨
(¬(~packagename = fpackagename))]:
   [
   state_1121111111111111111111( ~advk, ~content, ~devId, ~nonce,
                                 ~packagename, ~sid, ~skAT, atId, blob, deviceId, fappSignature,
                                 fpackagename, measurement
   )
   ]
  --[
  restr_ifsignadvkpackagenamecontentfappSignaturepackagenamefpackagename_1_1121111111111111111111_1( sign(~advk,
                                                                                                          <
                                                                                                           ~packagename, 
                                                                                                           ~content
                                                                                                          >),
                                                                                                     fappSignature,
                                                                                                     ~packagename,
                                                                                                     fpackagename
  )
  ]->
   [
   state_11211111111111111111112( ~advk, ~content, ~devId, ~nonce,
                                  ~packagename, ~sid, ~skAT, atId, blob, deviceId, fappSignature,
                                  fpackagename, measurement
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventVerdictappatIddeviceIdmeasurementinvalid_0_11211111111111111111111[color=#805a40 process=event Verdict_app( atId, deviceId, measurement, 'invalid' );]:
   [
   state_11211111111111111111111( ~advk, ~content, ~devId, ~nonce,
                                  ~packagename, ~sid, ~skAT, atId, blob, deviceId, fappSignature,
                                  fpackagename, measurement
   )
   ]
  --[ Verdict_app( atId, deviceId, measurement, 'invalid' ) ]->
   [
   state_112111111111111111111111( ~advk, ~content, ~devId, ~nonce,
                                   ~packagename, ~sid, ~skAT, atId, blob, deviceId, fappSignature,
                                   fpackagename, measurement
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventDfinish_0_112111111111111111111111[color=#805a40 process=event D_finish( );]:
   [
   state_112111111111111111111111( ~advk, ~content, ~devId, ~nonce,
                                   ~packagename, ~sid, ~skAT, atId, blob, deviceId, fappSignature,
                                   fpackagename, measurement
   )
   ]
  --[ D_finish( ) ]->
   [
   state_1121111111111111111111111( ~advk, ~content, ~devId, ~nonce,
                                    ~packagename, ~sid, ~skAT, atId, blob, deviceId, fappSignature,
                                    fpackagename, measurement
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_1121111111111111111111111[color=#805a40 process=0]:
   [
   state_1121111111111111111111111( ~advk, ~content, ~devId, ~nonce,
                                    ~packagename, ~sid, ~skAT, atId, blob, deviceId, fappSignature,
                                    fpackagename, measurement
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventVerdictappatIddeviceIdmeasurementvalid_0_11211111111111111111112[color=#805a40 process=event Verdict_app( atId, deviceId, measurement, 'valid' );]:
   [
   state_11211111111111111111112( ~advk, ~content, ~devId, ~nonce,
                                  ~packagename, ~sid, ~skAT, atId, blob, deviceId, fappSignature,
                                  fpackagename, measurement
   )
   ]
  --[ Verdict_app( atId, deviceId, measurement, 'valid' ) ]->
   [
   state_112111111111111111111121( ~advk, ~content, ~devId, ~nonce,
                                   ~packagename, ~sid, ~skAT, atId, blob, deviceId, fappSignature,
                                   fpackagename, measurement
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventDfinish_0_112111111111111111111121[color=#805a40 process=event D_finish( );]:
   [
   state_112111111111111111111121( ~advk, ~content, ~devId, ~nonce,
                                   ~packagename, ~sid, ~skAT, atId, blob, deviceId, fappSignature,
                                   fpackagename, measurement
   )
   ]
  --[ D_finish( ) ]->
   [
   state_1121111111111111111111211( ~advk, ~content, ~devId, ~nonce,
                                    ~packagename, ~sid, ~skAT, atId, blob, deviceId, fappSignature,
                                    fpackagename, measurement
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_1121111111111111111111211[color=#805a40 process=0]:
   [
   state_1121111111111111111111211( ~advk, ~content, ~devId, ~nonce,
                                    ~packagename, ~sid, ~skAT, atId, blob, deviceId, fappSignature,
                                    fpackagename, measurement
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_112112[color=#6d8040 process=!]:
   [ state_112112( ~skAT ) ] --> [ !semistate_1121121( ~skAT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_112112[color=#6d8040 process=!]:
   [ !semistate_1121121( ~skAT ) ] --> [ state_1121121( ~skAT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TOATsidrepatIdmeasurementpackagenameappSignaturenoncedeviceIdskATTrustzone_0_1121121[color=#6d8040 process= [
 TOAT( sid,
       rep(<atId, measurement, packagename, appSignature, nonce, deviceId
           >,
           <~skAT, 'Trustzone'>)
 )
 ]
-->
 [ ];]:
   [
   state_1121121( ~skAT ),
   TOAT( sid,
         rep(<atId, measurement, packagename, appSignature, nonce, deviceId
             >,
             <~skAT, 'Trustzone'>)
   )
   ]
  -->
   [
   state_11211211( ~skAT, appSignature, atId, deviceId, measurement,
                   nonce, packagename, sid
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) FRATsidatIdmeasurementpackagenameappSignaturenoncedeviceId_0_11211211[color=#6d8040 process= [ ]
-->
 [
 FRAT( sid,
       <atId, measurement, packagename, appSignature, nonce, deviceId>
 )
 ];]:
   [
   state_11211211( ~skAT, appSignature, atId, deviceId, measurement,
                   nonce, packagename, sid
   )
   ]
  -->
   [
   state_112112111( ~skAT, appSignature, atId, deviceId, measurement,
                    nonce, packagename, sid
   ),
   FRAT( sid,
         <atId, measurement, packagename, appSignature, nonce, deviceId>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventTfinish_0_112112111[color=#6d8040 process=event T_finish( );]:
   [
   state_112112111( ~skAT, appSignature, atId, deviceId, measurement,
                    nonce, packagename, sid
   )
   ]
  --[ T_finish( ) ]->
   [
   state_1121121111( ~skAT, appSignature, atId, deviceId, measurement,
                     nonce, packagename, sid
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_1121121111[color=#6d8040 process=0]:
   [
   state_1121121111( ~skAT, appSignature, atId, deviceId, measurement,
                     nonce, packagename, sid
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_11212[color=#ffffff process=!]:
   [ state_11212( ~skAT ) ] --> [ !semistate_112121( ~skAT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_11212[color=#ffffff process=!]:
   [ !semistate_112121( ~skAT ) ] --> [ state_112121( ~skAT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_112121[color=#ffffff process=|]:
   [ state_112121( ~skAT ) ]
  -->
   [ state_1121211( ~skAT ), state_1121212( ~skAT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newswId_0_1121211[color=#538040 process=new ~swId;]:
   [ state_1121211( ~skAT ), Fr( ~swId ) ]
  -->
   [ state_11212111( ~skAT, ~swId ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) SetUPSWdeviceIdstatusFinishSetUPSWdeviceIdswId_0_11212111[color=#538040 process= [ SetUPSW( deviceId, status ) ]
-->
 [ FinishSetUPSW( deviceId, ~swId ) ];]:
   [ state_11212111( ~skAT, ~swId ), SetUPSW( deviceId, status ) ]
  -->
   [
   state_112121111( ~skAT, ~swId, deviceId, status ),
   FinishSetUPSW( deviceId, ~swId )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) incustomSoftwareMeasurement_0_112121111[color=#538040 process=in(customSoftwareMeasurement);]:
   [
   state_112121111( ~skAT, ~swId, deviceId, status ),
   In( customSoftwareMeasurement )
   ]
  -->
   [
   state_1121211111( ~skAT, ~swId, customSoftwareMeasurement,
                     deviceId, status
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_1121211111[color=#538040 process=!]:
   [
   state_1121211111( ~skAT, ~swId, customSoftwareMeasurement,
                     deviceId, status
   )
   ]
  -->
   [
   !semistate_11212111111( ~skAT, ~swId, customSoftwareMeasurement,
                           deviceId, status
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) __1_1121211111[color=#538040 process=!]:
   [
   !semistate_11212111111( ~skAT, ~swId, customSoftwareMeasurement,
                           deviceId, status
   )
   ]
  -->
   [
   state_11212111111( ~skAT, ~swId, customSoftwareMeasurement,
                      deviceId, status
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) TOSWdeviceIdswIdnoncepackagenamecontentappSignature_0_11212111111[color=#538040 process= [
 TOSW( deviceId, ~swId, nonce, packagename, content, appSignature )
 ]
-->
 [ ];]:
   [
   state_11212111111( ~skAT, ~swId, customSoftwareMeasurement,
                      deviceId, status
   ),
   TOSW( deviceId, ~swId, nonce, packagename, content, appSignature )
   ]
  -->
   [
   state_112121111111( ~skAT, ~swId, appSignature, content,
                       customSoftwareMeasurement, deviceId, nonce, packagename, status
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) newatId_0_112121111111[color=#538040 process=new ~atId;]:
   [
   state_112121111111( ~skAT, ~swId, appSignature, content,
                       customSoftwareMeasurement, deviceId, nonce, packagename, status
   ),
   Fr( ~atId )
   ]
  -->
   [
   state_1121211111111( ~atId, ~skAT, ~swId, appSignature, content,
                        customSoftwareMeasurement, deviceId, nonce, packagename, status
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventAttestatingAppatIdpackagenameappSignaturedeviceId_0_1121211111111[color=#538040 process=event Attestating_App( ~atId, packagename, appSignature, deviceId );]:
   [
   state_1121211111111( ~atId, ~skAT, ~swId, appSignature, content,
                        customSoftwareMeasurement, deviceId, nonce, packagename, status
   )
   ]
  --[ Attestating_App( ~atId, packagename, appSignature, deviceId )
  ]->
   [
   state_11212111111111( ~atId, ~skAT, ~swId, appSignature, content,
                         customSoftwareMeasurement, deviceId, nonce, packagename, status
   )
   ]

  /* has exactly the trivial AC variant */

restriction restr_ifstatustamper_0_11212111111111_1:
  "∀ x #NOW.
    (restr_ifstatustamper_0_11212111111111_1( x ) @ #NOW) ⇒
    (x = 'tamper')"
  // safety formula

rule (modulo E) ifstatustamper_0_11212111111111[color=#538040 process=if status = 'tamper']:
   [
   state_11212111111111( ~atId, ~skAT, ~swId, appSignature, content,
                         customSoftwareMeasurement, deviceId, nonce, packagename, status
   )
   ]
  --[ restr_ifstatustamper_0_11212111111111_1( status ) ]->
   [
   state_112121111111111( ~atId, ~skAT, ~swId, appSignature, content,
                          customSoftwareMeasurement, deviceId, nonce, packagename, status
   )
   ]

  /* has exactly the trivial AC variant */

restriction restr_ifstatustamper_1_11212111111111_1:
  "∀ x #NOW.
    (restr_ifstatustamper_1_11212111111111_1( x ) @ #NOW) ⇒
    (¬(x = 'tamper'))"
  // safety formula

rule (modulo E) ifstatustamper_1_11212111111111[color=#538040 process=if status = 'tamper']:
   [
   state_11212111111111( ~atId, ~skAT, ~swId, appSignature, content,
                         customSoftwareMeasurement, deviceId, nonce, packagename, status
   )
   ]
  --[ restr_ifstatustamper_1_11212111111111_1( status ) ]->
   [
   state_112121111111112( ~atId, ~skAT, ~swId, appSignature, content,
                          customSoftwareMeasurement, deviceId, nonce, packagename, status
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventDeviceStatusatIddeviceIdinvalid_0_112121111111111[color=#538040 process=event DeviceStatus( ~atId, deviceId, 'invalid' );]:
   [
   state_112121111111111( ~atId, ~skAT, ~swId, appSignature, content,
                          customSoftwareMeasurement, deviceId, nonce, packagename, status
   )
   ]
  --[ DeviceStatus( ~atId, deviceId, 'invalid' ) ]->
   [
   state_1121211111111111( ~atId, ~skAT, ~swId, appSignature, content,
                           customSoftwareMeasurement, deviceId, nonce, packagename, status
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) outrepatIdcustomSoftwareMeasurementnoncepackagenameappSignaturedeviceIdskATTrustzone_0_1121211111111111[color=#538040 process=out(rep(<~atId, customSoftwareMeasurement, nonce, packagename, 
     appSignature, deviceId>,
    <~skAT, 'Trustzone'>));]:
   [
   state_1121211111111111( ~atId, ~skAT, ~swId, appSignature, content,
                           customSoftwareMeasurement, deviceId, nonce, packagename, status
   )
   ]
  -->
   [
   state_11212111111111111( ~atId, ~skAT, ~swId, appSignature,
                            content, customSoftwareMeasurement, deviceId, nonce, packagename,
                            status
   ),
   Out( rep(<~atId, customSoftwareMeasurement, nonce, packagename, 
             appSignature, deviceId>,
            <~skAT, 'Trustzone'>)
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) outpackagenameappSignature_0_11212111111111111[color=#538040 process=out(packagename,appSignature);]:
   [
   state_11212111111111111( ~atId, ~skAT, ~swId, appSignature,
                            content, customSoftwareMeasurement, deviceId, nonce, packagename,
                            status
   ),
   In( packagename )
   ]
  -->
   [
   Out( appSignature ),
   state_112121111111111111( ~atId, ~skAT, ~swId, appSignature,
                             content, customSoftwareMeasurement, deviceId, nonce, packagename,
                             status
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) outpackagenameappSignature_1_11212111111111111[color=#538040 process=out(packagename,appSignature);]:
   [
   state_11212111111111111( ~atId, ~skAT, ~swId, appSignature,
                            content, customSoftwareMeasurement, deviceId, nonce, packagename,
                            status
   )
   ]
  -->
   [
   Message( packagename, appSignature ),
   semistate_112121111111111111( ~atId, ~skAT, ~swId, appSignature,
                                 content, customSoftwareMeasurement, deviceId, nonce, packagename,
                                 status
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) outpackagenameappSignature_2_11212111111111111[color=#538040 process=out(packagename,appSignature);]:
   [
   semistate_112121111111111111( ~atId, ~skAT, ~swId, appSignature,
                                 content, customSoftwareMeasurement, deviceId, nonce, packagename,
                                 status
   ),
   Ack( packagename, appSignature )
   ]
  -->
   [
   state_112121111111111111( ~atId, ~skAT, ~swId, appSignature,
                             content, customSoftwareMeasurement, deviceId, nonce, packagename,
                             status
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventSfinish_0_112121111111111111[color=#538040 process=event S_finish( );]:
   [
   state_112121111111111111( ~atId, ~skAT, ~swId, appSignature,
                             content, customSoftwareMeasurement, deviceId, nonce, packagename,
                             status
   )
   ]
  --[ S_finish( ) ]->
   [
   state_1121211111111111111( ~atId, ~skAT, ~swId, appSignature,
                              content, customSoftwareMeasurement, deviceId, nonce, packagename,
                              status
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_1121211111111111111[color=#538040 process=0]:
   [
   state_1121211111111111111( ~atId, ~skAT, ~swId, appSignature,
                              content, customSoftwareMeasurement, deviceId, nonce, packagename,
                              status
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventDeviceStatusatIddeviceIdvalid_0_112121111111112[color=#538040 process=event DeviceStatus( ~atId, deviceId, 'valid' );]:
   [
   state_112121111111112( ~atId, ~skAT, ~swId, appSignature, content,
                          customSoftwareMeasurement, deviceId, nonce, packagename, status
   )
   ]
  --[ DeviceStatus( ~atId, deviceId, 'valid' ) ]->
   [
   state_1121211111111121( ~atId, ~skAT, ~swId, appSignature, content,
                           customSoftwareMeasurement, deviceId, nonce, packagename, status
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) outrepatIdvalidnoncepackagenameappSignaturedeviceIdskATTrustzone_0_1121211111111121[color=#538040 process=out(rep(<~atId, 'valid', nonce, packagename, appSignature, deviceId>,
    <~skAT, 'Trustzone'>));]:
   [
   state_1121211111111121( ~atId, ~skAT, ~swId, appSignature, content,
                           customSoftwareMeasurement, deviceId, nonce, packagename, status
   )
   ]
  -->
   [
   state_11212111111111211( ~atId, ~skAT, ~swId, appSignature,
                            content, customSoftwareMeasurement, deviceId, nonce, packagename,
                            status
   ),
   Out( rep(<~atId, 'valid', nonce, packagename, appSignature, 
             deviceId>,
            <~skAT, 'Trustzone'>)
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventSfinish_0_11212111111111211[color=#538040 process=event S_finish( );]:
   [
   state_11212111111111211( ~atId, ~skAT, ~swId, appSignature,
                            content, customSoftwareMeasurement, deviceId, nonce, packagename,
                            status
   )
   ]
  --[ S_finish( ) ]->
   [
   state_112121111111112111( ~atId, ~skAT, ~swId, appSignature,
                             content, customSoftwareMeasurement, deviceId, nonce, packagename,
                             status
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_112121111111112111[color=#538040 process=0]:
   [
   state_112121111111112111( ~atId, ~skAT, ~swId, appSignature,
                             content, customSoftwareMeasurement, deviceId, nonce, packagename,
                             status
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) SetUPSWdeviceIdstatus_0_1121212[color=#7c4080 process= [ SetUPSW( deviceId, status ) ] --> [ ];]:
   [ state_1121212( ~skAT ), SetUPSW( deviceId, status ) ]
  -->
   [ state_11212121( ~skAT, deviceId, status ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

restriction restr_ifstatustamper_0_11212121_1:
  "∀ x #NOW.
    (restr_ifstatustamper_0_11212121_1( x ) @ #NOW) ⇒
    (¬(x = 'tamper'))"
  // safety formula

rule (modulo E) ifstatustamper_0_11212121[color=#7c4080 process=if ¬(status = 'tamper')]:
   [ state_11212121( ~skAT, deviceId, status ) ]
  --[ restr_ifstatustamper_0_11212121_1( status ) ]->
   [ state_112121211( ~skAT, deviceId, status ) ]

  /* has exactly the trivial AC variant */

restriction restr_ifstatustamper_1_11212121_1:
  "∀ x #NOW.
    (restr_ifstatustamper_1_11212121_1( x ) @ #NOW) ⇒
    (¬(¬(x = 'tamper')))"
  // safety formula

rule (modulo E) ifstatustamper_1_11212121[color=#7c4080 process=if ¬(status = 'tamper')]:
   [ state_11212121( ~skAT, deviceId, status ) ]
  --[ restr_ifstatustamper_1_11212121_1( status ) ]->
   [ state_112121212( ~skAT, deviceId, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) SetUPSWdeviceIdtamper_0_112121211[color=#7c4080 process= [ ] --> [ SetUPSW( deviceId, 'tamper' ) ];]:
   [ state_112121211( ~skAT, deviceId, status ) ]
  -->
   [
   state_1121212111( ~skAT, deviceId, status ),
   SetUPSW( deviceId, 'tamper' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_1121212111[color=#7c4080 process=0]:
   [ state_1121212111( ~skAT, deviceId, status ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) __0_112121212[color=#7c4080 process=0]:
   [ state_112121212( ~skAT, deviceId, status ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/* All well-formedness checks were successful. */

end