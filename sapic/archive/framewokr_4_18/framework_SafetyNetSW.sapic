/*******************************************************************************
	Remote attestation Framework
	AUTHORS
	
	
*******************************************************************************/

theory Framework_SafetyNetSW
begin

builtins: signing, asymmetric-encryption

functions: check_rep/2,  get_rep/1, rep/2 [private], create_certificate/3, verify_certificate/2 , get_tbsInfo_certificate/1

equations:
    check_rep(rep(x.1, x.2), x.2) = true,
    get_rep(rep(x.1, x.2)) = x.1,

    create_certificate(SubjectTBSCertificateInfo,SubjectPup,IssuerSk) 
      = < SubjectTBSCertificateInfo, SubjectPup, sign(<SubjectTBSCertificateInfo, SubjectPup>,IssuerSk) >,

    verify_certificate( 
    < SubjectTBSCertificateInfo, pk(SubjectSk), sign(<SubjectTBSCertificateInfo, pk(SubjectSk)>,IssuerSk) >
     , < IssuerTBSCertificateInfo, pk(IssuerSk), sign(<IssuerTBSCertificateInfo, pk(IssuerSk)>,IssuerRootSk) >
          ) = true,

    get_tbsInfo_certificate( 
        < SubjectTBSCertificateInfo, pk(SubjectSk), sign(<SubjectTBSCertificateInfo, pk(SubjectSk)>,IssuerSk) >
          ) = SubjectTBSCertificateInfo
      

/***************************************** SafetyNet SW *****************************************/

let AtServerSN =
	!(

		//retrive the blob from the developer server and verfiy it
        [TOAT(sid,rep(<atId,measurement,packagename,appSignature,nonce, deviceId>,<~skAT,'Trustzone'>))]--[]-> [];

		//create a verdict  and send it to the developer server
		let verdict = <atId,measurement,packagename,appSignature,nonce, deviceId> in		
        []--[]-> [FRAT(sid,verdict)];

		event T_finish() 
	)

let GooglePlay =

	!(
		//retrieve an application information + nonce
		in(<nonce,packagename,content,sign(key,<packagename,content>)>);
		
		new ~atId;
		event Attestating_App(~atId,packagename,sign(key,<packagename,content>),~deviceId);

		if(status = 'tamper') then
			let hardwareMeasurement = 'invalid' in
			let softwareMeasurement = customSoftwareMeasurement in
			let blob = rep(<~atId,softwareMeasurement,packagename,sign(key,<packagename,content>),nonce, ~deviceId>,<~skAT,'Trustzone'>) in 
			//send attestation report to the app
			event DeviceStatus(~atId,~deviceId,hardwareMeasurement);
			out(blob);
			event S_finish();
			0
		else
			let hardwareMeasurement = 'valid' in
			let softwareMeasurement = 'valid' in
			let blob = rep(<~atId,softwareMeasurement,packagename,sign(key,<packagename,content>),nonce, ~deviceId>,<~skAT,'Trustzone'>) in 
			//send attestation report to the app
			event DeviceStatus(~atId,~deviceId,hardwareMeasurement);
			out(blob);
			event S_finish();
			0
			
	)
	

let DevServerSN =

	//creating and publising the application
	new ~advk;
	new ~content;
	new ~packagename;
	let appSignature = sign(~advk, <~packagename,~content>) in
	let app = <~packagename,~content,appSignature> in
	out(app);
	event App_Created(~packagename,appSignature);
	
	!(
	
		// create a nonce
		new ~nonce;
		event NonceGenerated(~nonce);
		out(~nonce);
		
		//retrive blob from clients
		in(blob);
		
		//create developer-attesation server session id, to keep track or pair of request-response message  
		new ~sid;
		//send blob to the attestation server
		[]--[]-> [TOAT(~sid,blob)];
		
		//retrieve the verfied report the attestation server, pattern matching is used for checking the status
		[FRAT(~sid,<atId,measurement,fpackagename,fappSignature,~nonce, deviceId>)]--[]-> [];
		
		//attestation finished		
		if not(appSignature = fappSignature) | not(~packagename = fpackagename)  then
			event Verdict_app(atId,deviceId,measurement,'invalid');
			event D_finish() 
		else
			event Verdict_app(atId,deviceId,measurement,'valid');
			event D_finish() 
		
		
		
	)



/*************************************** Generic code *************************************************/
	
// Main process starts here

/***************************************** choose a platofrm ***************************************************
* platform				|		SafetyNet			|		KnoxV2		|	KnoxV3			|	Key Attestation
* --------------------------------------------------------------------------------------------------------------
* AttestationAgent		: GooglePlay | SafetyNetTA	|	KnoxV2TA		|	KnoxV3TA		|	KeyMasterTA
* AtServer				:		AtServerSN			|	AtServerKV2		|	AtServerKV3		|	AtServerKA
* DevServer				:		DevServerSN			|	DevServerKV2	|	DevServerKV3	|	DevServerKA
***************************************************************************************************************/


let AttestationAgent =
	GooglePlay

let AtServer = 
	AtServerSN

let DevServer = 
	DevServerSN


let Device =

	//Create device reference
	new ~deviceId;

	//retrieve an adversary's attempt to compomised the device
	in(<status,customSoftwareMeasurement>);

	//send the device refernece , allows an advsery to tamper the device
	out(~deviceId);

	AttestationAgent



//create pair attetsation keys to be used by secreworld for sigining, and attestation server for verfication
new ~skAT;
let pkAT = pk(~skAT) in


(!Device || !DevServer || AtServer)

// for all valid attestation => (device must be not rooted and app must be not repacked).
lemma DeviceAndAppIntegrity:
	"(All atId deviceId #i. Verdict_app(atId,deviceId,'valid','valid') @ i ==> 
	( 
	(Ex #j. DeviceStatus(atId,deviceId,'valid') @ j & j < i) 
	& (Ex packagename appSignature #j #k. 
			 App_Created(packagename,appSignature) @ j 
			 & Attestating_App(atId,packagename,appSignature,deviceId)@ k)
	))"

//Sanity check: Attestation finished
lemma Correctness_AT:
exists-trace
	"Ex atId deviceId #i. Verdict_app(atId,deviceId,'valid','valid') @ i"
	
end