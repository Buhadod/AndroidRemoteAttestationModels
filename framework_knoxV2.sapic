/*******************************************************************************
	Remote attestation Framework
	AUTHORS
	
	
*******************************************************************************/

theory Framework_KnoxV2
begin

builtins: signing, asymmetric-encryption

functions: check_rep/2,  get_rep/1, rep/2 [private], create_certificate/3, verify_certificate/2 , get_tbsInfo_certificate/1

equations:
    check_rep(rep(x.1, x.2), x.2) = true,
    get_rep(rep(x.1, x.2)) = x.1,

    create_certificate(SubjectTBSCertificateInfo,SubjectPup,IssuerSk) 
      = < SubjectTBSCertificateInfo, SubjectPup, sign(<SubjectTBSCertificateInfo, SubjectPup>,IssuerSk) >,

    verify_certificate( 
    < SubjectTBSCertificateInfo, pk(SubjectSk), sign(<SubjectTBSCertificateInfo, pk(SubjectSk)>,IssuerSk) >
     , < IssuerTBSCertificateInfo, pk(IssuerSk), sign(<IssuerTBSCertificateInfo, pk(IssuerSk)>,IssuerRootSk) >
          ) = true,

    get_tbsInfo_certificate( 
        < SubjectTBSCertificateInfo, pk(SubjectSk), sign(<SubjectTBSCertificateInfo, pk(SubjectSk)>,IssuerSk) >
          ) = SubjectTBSCertificateInfo
      


/***************************************** Generic *****************************************/


let HonestAppInstalltion =
	event Checked('HonestAppInstalltion');
	//install an application
	[!App_Published(devId,packagename,content,appSignature)]--[]-> [];

	event Application_Installed(~deviceId,packagename,content,appSignature);

	//receive a nonce
	[Nonce_Sent(devId,nonce)]--[]-> [];

	event NonceRecieved(nonce);

	//attestation_agent send app data to secure world to start an attestation
	[]--[]-> [TOSW(~deviceId,nonce,packagename,content,appSignature)];

	0


let ArbitraryAppInstalltion =
	event Checked('ArbitraryAppInstalltion');
	//install an application
	in(<packagename,content>);
	new ~hash;
	let appSignature = ~hash in

	event Application_Installed(~deviceId,packagename,content,appSignature);

	//receive a nonce
	in(nonce);

	event NonceRecieved(nonce);

	//attestation_agent send app data to secure world to start an attestation
	[]--[]-> [TOSW(~deviceId,nonce,packagename,content,appSignature)];

	0

let AppInstallation =
	(HonestAppInstalltion + ArbitraryAppInstalltion)

let Device =

	//Create device reference
	new ~deviceId;

	//send the device refernece , allows an advsery to tamper the device
	out(~deviceId);
	
	let status = 'valid' in
	//setup a secureWorld
	[]--[]-> [SetUPSW(~deviceId,status)];
	[FinishSetUPSW(~deviceId)]--[]->[];
	event A_finished();

	!AppInstallation


/***************************************** Knox V2 *****************************************/

let AtServerKV2 =
	!(

		//retrive the blob from the developer server and verfiy it
        [TOAT(sid,rep(<atId,hardwareMeasurement,nonce, deviceId>,<~skAT,'Trustzone'>))]--[]-> [];

		//create a verdict  and send it to the developer server
		let verdict = <atId,hardwareMeasurement,nonce, deviceId> in
        []--[]-> [FRAT(sid,verdict)];

		event T_finish() 
	)

let UnlockBootloader =
	[SetUPSW(deviceId,status)]--[]->[];
	if not(status = 'invalid') then
		[]--[]->[SetUPSW(deviceId,'invalid')];
		0

let KnoxV2TA =

	//setup a Secureworld
	[SetUPSW(deviceId,status)]--[]->[FinishSetUPSW(deviceId)];
	
	//retrieve an adversary's attempt to compomised the device
	//in(customSoftwareMeasurement); // no need because the protocol is hardware-based (1) 

	!(
		//attestation_agent send app data to secure world, start an attestation
		[TOSW(deviceId,nonce,packagename,content,appSignature)]--[]->[];

		
		new ~atId; // attestation id
		event Attestating_App(~atId,packagename,appSignature,deviceId);

		let hardwareMeasurement = status in
		//let softwareMeasurement =  customSoftwareMeasurement in // no need because the protocol is hardware-based (1) 
		let blob = rep(<~atId,hardwareMeasurement,nonce, deviceId>,<~skAT,'Trustzone'>) in 
		///send attestation report to the attestation server
		event DeviceStatus(~atId,deviceId,hardwareMeasurement);
		out(blob);
		out(packagename,appSignature);
		event S_finish();
		0
			
	)


let DevServerKV2 =

	//creating and publising the application
	new ~advk;
	new ~content;
	new ~packagename;
	let appSignature = sign(~advk, <~packagename,~content>) in
	let app = <~packagename,~content,appSignature> in
	out(app);
	event App_Created(~packagename,appSignature);

	new ~devId;
	[]--[]-> [!App_Published(~devId,~packagename,~content,appSignature)];
	!(
	
		// create a nonce
		new ~nonce;
		event NonceGenerated(~nonce);
		[]--[]-> [Nonce_Sent(~devId,~nonce)];
		out(~nonce);
		
		//retrive blob from clients
		in(blob);
		
		//create developer-attesation server session id, to keep track or pair of request-response message  
		new ~sid;
		//send blob to the attestation server
		[]--[]-> [TOAT(~sid,blob)];
		
		//retreive the verfied report the attestation server, pattern matching is used for checking the status
		[FRAT(~sid,<atId,hardwareMeasurement,~nonce, deviceId>)]--[]-> [];
		
		//attestation finished	//becasue measurement miss app info. so we always assume invalid	
		event Verdict_app(atId,deviceId,hardwareMeasurement,'invalid'); 
		0


	)

/*************************************** Generic code *************************************************/
	
// Main process starts here

/***************************************** choose a platofrm ***************************************************
* platform				|		SafetyNet			|		KnoxV2		|	KnoxV3			|	Key Attestation
* --------------------------------------------------------------------------------------------------------------
* AttestationAgent		: GooglePlay | SafetyNetTA	|	KnoxV2TA		|	KnoxV3TA		|	KeyMasterTA
* AtServer				:		AtServerSN			|	AtServerKV2		|	AtServerKV3		|	AtServerKA
* DevServer				:		DevServerSN			|	DevServerKV2	|	DevServerKV3	|	DevServerKA
***************************************************************************************************************/


let AttestationAgent =
	KnoxV2TA

let AtServer = 
	AtServerKV2

let DevServer = 
	DevServerKV2



//create pair attetsation keys to be used by secreworld for sigining, and attestation server for verfication
new ~skAT;

(!Device || !DevServer || AtServer || !AttestationAgent || UnlockBootloader)

// for all valid attestation => (device must be not rooted and app must be not repacked).
lemma DeviceAndAppIntegrity:
	"(All atId deviceId a #i. Verdict_app(atId,deviceId,'valid',a) @ i ==> 
	( 
	(Ex #j. DeviceStatus(atId,deviceId,'valid') @ j & j < i) 
	& (Ex packagename appSignature #j #k. 
			 App_Created(packagename,appSignature) @ j 
			 & Attestating_App(atId,packagename,appSignature,deviceId)@ k)
	))"


// for all failed application integrity check only  => (device must be valid and there an app created, an app attested and either the hash is different or packagename).
lemma RepackedAppIntegrity:
	"(All atId deviceId #i. Verdict_app(atId,deviceId,'valid','invalid') @ i ==> 
	( 
	(Ex #j. DeviceStatus(atId,deviceId,'valid') @ j & j < i) 
	& (Ex packagename fpackagename appSignature fappSignature #j #k. 
			 App_Created(packagename,appSignature) @ j 
			 & Attestating_App(atId,fpackagename,fappSignature,deviceId)@ k
			 & (
					(not(appSignature = fappSignature))
					| (not(packagename = fpackagename))
			 	)
			 
		)
	))"

// Check if nonce are unique 
lemma UniqueNonce:
	"All n #i #j. NonceGenerated(n) @i & NonceGenerated(n) @j ==> #i=#j"
	
//Sanity check: Attestation finished with valid device integirty and application integirty. 
lemma Correctness_Both_Valid:
exists-trace
	"Ex atId deviceId #i. Verdict_app(atId,deviceId,'valid','valid') @ i"

//Sanity check: Attestation finished with at least failed device integirty
lemma Correctness_Rooting_Device:
exists-trace
	"Ex atId any deviceId #i. Verdict_app(atId,deviceId,'invalid',any) @ i"

//Sanity check: Creation of an honest application 
lemma Correctness_Honest_App:
exists-trace
	"Ex #i. Checked('HonestAppInstalltion') @ i"

//Sanity check: Creation of an arbitrary application 
lemma Correctness_Arbitrary_App:
exists-trace
	"Ex #i. Checked('ArbitraryAppInstalltion') @ i"
	
end

// ==============================================================================
// summary of summaries:

//   solved goal nr. 108 (precomputed):
//     SetUPSW( ~deviceId.1, status ) ▶₁ #vr.90
//   solved goal nr. 142 (precomputed):
//     SetUPSW( ~deviceId.1, status ) ▶₁ #vr.109
//   solved goal nr. 108 (precomputed):
//     SetUPSW( ~deviceId.1, status ) ▶₁ #vr.90
//   simplified formula:
//       "¬('valid' = 'invalid')"
//     to
//       "⊤"
//   simplified formula:
//       "¬('valid' = 'invalid')"
//     to
//       "⊤"
//   simplified formula:
//       "¬('valid' = 'invalid')"
//     to
//       "⊤"
//   simplified formula:
//       "¬('invalid' = 'invalid')"
//     to
//       "⊥"
//   simplified formula:
//       "¬('invalid' = 'invalid')"
//     to
//       "⊥"
//   simplified formula:
//       "¬('invalid' = 'invalid')"
//     to
//       "⊥"
// analyzed: framework_knoxV2.sapic

//   DeviceAndAppIntegrity (all-traces): falsified - found trace (5 steps)
//   RepackedAppIntegrity (all-traces): falsified - found trace (4 steps)
//   UniqueNonce (all-traces): verified (8 steps)
//   Correctness_Both_Valid (exists-trace): falsified - no trace found (1 steps)
//   Correctness_Rooting_Device (exists-trace): verified (5 steps)
//   Correctness_Honest_App (exists-trace): verified (4 steps)
//   Correctness_Arbitrary_App (exists-trace): verified (4 steps)

// ==============================================================================
