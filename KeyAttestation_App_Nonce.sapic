/*******************************************************************************
	Remote attestation Framework
	AUTHORS
	
	
*******************************************************************************/

theory Framework_KeyAttestation_App_Nonce
begin

builtins: signing, asymmetric-encryption, locations-report

heuristic: S

predicates:
Report(x,y) <=> not  (fst(y)= 'loc')

functions: create_certificate/3, verify_certificate/2 , get_tbsInfo_certificate/1

equations:

    create_certificate(SubjectTBSCertificateInfo,SubjectPup,IssuerSk) 
      = < SubjectTBSCertificateInfo, SubjectPup, sign(<SubjectTBSCertificateInfo, SubjectPup>,IssuerSk) >,

    verify_certificate( 
    < SubjectTBSCertificateInfo, pk(SubjectSk), sign(<SubjectTBSCertificateInfo, pk(SubjectSk)>,IssuerSk) >
     , < IssuerTBSCertificateInfo, pk(IssuerSk), sign(<IssuerTBSCertificateInfo, pk(IssuerSk)>,IssuerRootSk) >
          ) = true,

    get_tbsInfo_certificate( 
        < SubjectTBSCertificateInfo, pk(SubjectSk), sign(<SubjectTBSCertificateInfo, pk(SubjectSk)>,IssuerSk) >
          ) = SubjectTBSCertificateInfo
      


/***************************************** Generic *****************************************/

let AppCode = 
    [Nonce_Sent(devId,nonce)]--[]-> [];

	event NonceRecieved(nonce);

	//attestation_agent send app data to secure world to start an attestation
	new ~sessionID;
	[]--[]-> [TOSW(~sessionID,~deviceId,swId,nonce,'App1PackageName','App1Content',pk(advk))];
	[ FROMSW(~sessionID,certificateChain) ]--[]-> [];

	[]--[]-> [Certificate_Sent(certificateChain)];
	0

let HonestAppInstallation =
	event Checked('HonestAppInstallation');
	//install an application
	[!App_Published(devId,<'App1PackageName','App1Content',pk(advk),
	                   sign( <'App1PackageName','App1Content',pk(advk)>,advk)>)]--[]-> [];

	event Application_Installed(~deviceId,'App1PackageName','App1Content',sign( <'App1PackageName','App1Content',pk(advk)>,advk));

	!AppCode 

let ArbitraryAppCode =

	in(nonce);
	event NonceReceived(nonce);
	//attestation_agent send app data to secure world to start an attestation
	new ~sessionID;
	[]--[]-> [TOSW(~sessionID,~deviceId,swId,nonce,packagename,~content,pk(devKey))];
	[ FROMSW(~sessionID,certificateChain) ]--[]-> [];
	out(certificateChain);
	0

let ArbitraryAppInstallation =

	event Checked('ArbitraryAppInstallation');
	//install an application
	in(<packagename, devKey>); 

	new ~content;

	let appSignature = sign(<packagename,~content,pk(devKey)>,devKey) in
	let app = <packagename,~content,pk(devKey),appSignature> in
	out(app);
	event Arbitrary_App_Created(packagename,appSignature);
	event Application_Installed(~deviceId,packagename,~content,appSignature);

	!ArbitraryAppCode


let Device =

	//Create device reference
	new ~deviceId; 

	//send the device reference , allows an adversary to tamper the device
	out(~deviceId);
	
	//setup a secureWorld
	[]--[]-> [SetUPSW(~deviceId)];
	[FinishSetUPSW(~deviceId,swId)]--[]->[];
	event A_finished();

	(!HonestAppInstallation | !ArbitraryAppInstallation)

	
let RelayAttacker1 = 
	[Nonce_Sent(devId,nonce)]--[]-> [];
	out(nonce);
	0

let RelayAttacker2 = 
	in(certificateChain);
	[]--[]-> [Certificate_Sent(certificateChain)];
	0
/***************************************** Knox V3 *****************************************/

let AtServerKA =
	new ~rootSk;
	let rootCertificate = create_certificate('TbsInfo',pk(~rootSk),~rootSk) in

	//share root certficate	
	[]--[]->
	[
		!RequestCreatingIntermediateCertificate(~rootSk,rootCertificate),
		!GetRootCertificate(rootCertificate)
	];

	!(
		event T_finish() 
	)

	
let KeyMasterTA =

	(
	new ~swId; // We have different secure world and device ID, because it's possible to make different devices have the same ID, therefore 

	//setup a SecureWorld
	[SetUPSW(deviceId)]--[]->[FinishSetUPSW(deviceId,~swId)];

	
	//Request attestation server
	[!RequestCreatingIntermediateCertificate(rootSk,rootCertificate)]--[]->[];
	
	//Create keymaster certficate
	new ~keymasterSk;
	let  intermediateCertificate = create_certificate('TbsKeyStoreInfo',pk(~keymasterSk),rootSk) in

	//attempt to unlock the bootloader
	in(attempt);

	!(
		//attestation_agent send app data to secure world, start an attestation
		[TOSW(sessionID, deviceId,~swId,nonce,packagename,content,devPk)]--[]->[];

		new ~key;

		new ~atId;
		event Attestating_App(~atId,packagename,devPk,deviceId);

		if attempt = 'unlockBootloader' then
			let hardwareMeasurement = 'invalid' in
			//let softwareMeasurement = customSoftwareMeasurement in
			in(<fnonce,fpackagename,fdevPk>);	// adversary's custom softeware-based values
			let subjectCertificate = create_certificate(<~atId,hardwareMeasurement,fnonce,fpackagename,fdevPk>,pk(~key),~keymasterSk) in
			let certificateChain = <subjectCertificate, intermediateCertificate, rootCertificate> in 
			//send attestation report to the app
			event DeviceStatus(~atId,deviceId,hardwareMeasurement);
            event CreateCert(certificateChain);
			out(certificateChain);

			[]--[]->[ FROMSW(sessionID,certificateChain) ];
			event S_finish();
			0
		else
			let hardwareMeasurement = 'valid' in
			//let softwareMeasurement = 'valid' in
			let subjectCertificate = create_certificate(<~atId,hardwareMeasurement,nonce,packagename,devPk>,pk(~key),~keymasterSk) in
			let certificateChain = <subjectCertificate, intermediateCertificate, rootCertificate> in 
			//send attestation report to the app
			event DeviceStatus(~atId,deviceId,hardwareMeasurement);
            event CreateCert(certificateChain);
			[]--[]->[ FROMSW(sessionID,certificateChain) ];
			event S_finish();
			0
	
			
	)
	)@<'loc',pk(~skAT)>



let DevServerProtocolCode =
	
		// create a nonce
		new ~nonce;
		event NonceGenerated(~nonce);
        new ~requestID;
        event RequestCert(~requestID);
		[]--[]-> [Nonce_Sent(~devId,~nonce)];
		
		//retrieve blob from clients
		in(<<<atId,hardwareMeasurement,~nonce,fpackagename,fdevPk>,subjectPk,subjectChain>, intermediateCertificate, rootCertificate>,'TLS');
		let certificateChain = <<<atId,hardwareMeasurement,~nonce,fpackagename,fdevPk>,subjectPk,subjectChain>, intermediateCertificate, rootCertificate> in
		let subjectTbs = <atId,hardwareMeasurement,~nonce,fpackagename,fdevPk> in
		let subjectCertificate = <subjectTbs,subjectPk,subjectChain> in
		[!GetRootCertificate(rootCertificate)]--[]->[];
		
		let verification1 = verify_certificate(subjectCertificate, intermediateCertificate) in
		let verification2 = verify_certificate(intermediateCertificate, rootCertificate) in
		let verification3 = verify_certificate(rootCertificate, rootCertificate) in 

		
		if verification2 = true then
			if verification1 = true then
				if pk(~advk)  = fdevPk then
					if packagename = fpackagename  then
						event AcceptCert(~requestID,<subjectCertificate, intermediateCertificate, rootCertificate>);
						event Verdict_app(atId,certificateChain,'valid',hardwareMeasurement,'valid');
						event D_finish() 
					else
						event Verdict_app(atId,certificateChain,'valid',hardwareMeasurement,'invalid');
						event D_finish() 
				else
					event Verdict_app(atId,certificateChain,'valid',hardwareMeasurement,'invalid');
					event D_finish() 
			



let DevServerKA =

	//creating and publishing the application
	new ~advk; // Dev server signing
	new ~devId; 
	let packagename = 'App1PackageName' in
	let appSignature = sign( <'App1PackageName','App1Content',pk(~advk)>, ~advk) in 
	let app = <'App1PackageName','App1Content',pk(~advk),appSignature> in
	out(app);
	event App_Created('App1PackageName',appSignature);

	[]--[]-> [!App_Published(~devId,app)];
	
	!DevServerProtocolCode
/*************************************** Generic code *************************************************/
	
// Main process starts here

/***************************************** choose a platofrm ***************************************************
* platform				|		SafetyNet			|		KnoxV2		|	KnoxV3			|	Key Attestation
* --------------------------------------------------------------------------------------------------------------
* AttestationAgent		: GooglePlay | SafetyNetTA	|	KnoxV2TA		|	KnoxV3TA		|	KeyMasterTA
* AtServer				:		AtServerSN			|	AtServerKV2		|	AtServerKV3		|	AtServerKA
* DevServer				:		DevServerSN			|	DevServerKV2	|	DevServerKV3	|	DevServerKA
***************************************************************************************************************/


let AttestationAgent =
	KeyMasterTA

let AtServer = 
	AtServerKA

let DevServer = 
	DevServerKA




//create pair attetsation keys to be used by secreworld for sigining, and attestation server for verfication
new ~skAT;

(!Device || !DevServer || AtServer || !AttestationAgent || !RelayAttacker1 || !RelayAttacker2)


lemma CertPossible:
  exists-trace 
    "Ex requestID subjectCertificate intermediateCertificate rootCertificate #i #j.
        (AcceptCert(requestID,<subjectCertificate, intermediateCertificate, rootCertificate>) @i
        & RequestCert(requestID)@j) & #j < #i "


lemma CertFresh:
    "All requestID subjectCertificate intermediateCertificate rootCertificate #i.
        AcceptCert(requestID,<subjectCertificate, intermediateCertificate, rootCertificate>) @i
            ==>   Ex #j. RequestCert(requestID)@j
			    & Ex #k. CreateCert (<subjectCertificate, intermediateCertificate, rootCertificate>)@k
			    & #j < #k & #k < #i" 





// for all valid attestation => (device must be not rooted and app must be not repacked).
// lemma DeviceAndAppIntegrity:
// 	"(All atId #i. Verdict_app(atId,'valid','valid') @ i ==> 
// 	( 
// 	(Ex deviceId #j. DeviceStatus(atId,deviceId,'valid') @ j & j < i) 
// 	& (Ex deviceId packagename appSignature #j #k. 
// 			 App_Created(packagename,appSignature) @ j 
// 			 & Attestating_App(atId,packagename,appSignature,deviceId)@ k)
// 	))"

lemma DeviceAndAppIntegrity:
	"(All atId certificateChain #i. Verdict_app(atId,certificateChain,'valid','valid','valid') @ i ==> 
	 (	not( Ex #k. KU(certificateChain) @ k & k<i ) )
	)"

// // for all failed application integrity check only  => (device must be valid and there an app created, an app attested and either the hash is different or packagename).
// lemma RepackedAppIntegrity:
// 	"(All atId #i. Verdict_app(atId,'valid','invalid') @ i ==> 
// 	( 
// 	(Ex deviceId #j. DeviceStatus(atId,deviceId,'valid') @ j & j < i) 
// 	& (Ex deviceId packagename fpackagename appSignature fappSignature #j #k. 
// 			 App_Created(packagename,appSignature) @ j 
// 			 & Attestating_App(atId,fpackagename,fappSignature,deviceId)@ k
// 			 & (
// 					(not(appSignature = fappSignature))
// 					| (not(packagename = fpackagename))
// 			 	)
			 
// 		)
// 	))"

//Check if nonce are unique
lemma UniqueNonce:
	"All n #i #j. NonceGenerated(n) @i & NonceGenerated(n) @j ==> #i=#j"
	
//Sanity check: Attestation finished with valid device integirty and application integirty. 
// lemma Correctness_Both_Valid:
// exists-trace
// 	"Ex atId #i. Verdict_app(atId,'valid','valid') @ i"

// //Sanity check: Attestation finished with at least failed device integirty
// lemma Correctness_Rooting_Device:
// exists-trace
// 	"Ex atId any #i. Verdict_app(atId,'invalid',any) @ i"

//Sanity check: Creation of an honest application 
lemma Correctness_Honest_App:
exists-trace
	"Ex #i. Checked('HonestAppInstallation') @ i"

//Sanity check: Creation of an arbitrary application 
lemma Correctness_Arbitrary_App:
exists-trace
	"Ex #i. Checked('ArbitraryAppInstallation') @ i"
	
end

==============================================================================
summary of summaries:

analyzed: KeyAttestation_App_Nonce.sapic

  CertPossible (exists-trace): verified (13 steps)
  CertFresh (all-traces): verified (218 steps)
  DeviceAndAppIntegrity (all-traces): verified (284 steps)
  RepackedAppIntegrity (all-traces): verified (566 steps)
  UniqueNonce (all-traces): verified (8 steps)
  Correctness_Both_Valid (exists-trace): verified (13 steps)
  Correctness_Rooting_Device (exists-trace): verified (13 steps)
  Correctness_Honest_App (exists-trace): verified (4 steps)
  Correctness_Arbitrary_App (exists-trace): verified (4 steps)

==============================================================================
