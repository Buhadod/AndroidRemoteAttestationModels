/*******************************************************************************
	Remote attestation Framework
	AUTHORS
	
	
*******************************************************************************/

theory Test
begin

builtins: signing, asymmetric-encryption

functions: check_rep/2,  get_rep/1, rep/2 [private], create_certificate/3, verify_certificate/2 , get_tbsInfo_certificate/1, get_public_key_certificate/1, equal_term/2

equations:
    check_rep(rep(x.1, x.2), x.2) = true,
    get_rep(rep(x.1, x.2)) = x.1,

    create_certificate(SubjectTBSCertificateInfo,SubjectPup,IssuerSk) 
      = < SubjectTBSCertificateInfo, SubjectPup, sign(<SubjectTBSCertificateInfo, SubjectPup>,IssuerSk) >,

    verify_certificate( 
    < SubjectTBSCertificateInfo, pk(SubjectSk), sign(<SubjectTBSCertificateInfo, pk(SubjectSk)>,IssuerSk) >
     , < IssuerTBSCertificateInfo, pk(IssuerSk), sign(<IssuerTBSCertificateInfo, pk(IssuerSk)>,IssuerRootSk) >
          ) = true,

    get_tbsInfo_certificate( 
        < SubjectTBSCertificateInfo, pk(SubjectSk), sign(<SubjectTBSCertificateInfo, pk(SubjectSk)>,IssuerSk) >
          ) = SubjectTBSCertificateInfo,

	get_public_key_certificate( 
	< SubjectTBSCertificateInfo, pk(SubjectSk), sign(<SubjectTBSCertificateInfo, pk(SubjectSk)>,IssuerSk) >
		) = pk(SubjectSk),
	
	equal_term(<term1,term2>,<term1,term2>)
		= true
      


/***************************************** Generic *****************************************/

let Alice = 
	new ~secret;
	new ~aliceSk;

	[!Bob_Key_Puplished(bobPk)]--[]->[];
	[]--[]->[!Alice_Key_Puplished(pk(~aliceSk))];	


	event Secret_Generated(~secret);
	let signature = sign(~secret,~aliceSk) in
	let cipher = aenc(<~secret,signature>,bobPk) in 

	event Cipher_Sent(cipher);
	out(cipher);

	0

let Bob = 	

	new ~bobSk;
	out(pk(~bobSk));
	[]--[]->[!Bob_Key_Puplished(pk(~bobSk))];
	[!Alice_Key_Puplished(alicePk)]--[]->[];

	in(cipher);
	event Cipher_Received(cipher);
	let message = adec(cipher,~bobSk) in
	new ~id;
	[]--[]->[VerifyMessage(~id, message ,true)];
	[VerifyMessage(~id,<secret,signature> ,verify(signature,secret,alicePk) )]--[]->[];

	event Secret_Received(secret);

	0


(!Alice || !Bob)



lemma Correctness_CR:
exists-trace
	"Ex cipher #i #j. Cipher_Received(cipher) @ i & Cipher_Sent(cipher) @j"
	
lemma Correctness_SR:
	exists-trace
		"Ex secret #i #j. Secret_Generated(secret) @ i & Secret_Received(secret) @j"

// for all traces, it is not possibile that there exist a generated secret and KU know the secret
lemma Correctness_KS:
	all-traces
		"not(Ex secret #i #j. Secret_Generated(secret) @ i & KU(secret) @j)"

// for all traces, it is not possibile that there exist a cipher sent and KU know the cipher
lemma Correctness_KC:
	all-traces
		"not(Ex cipher #i #j. Cipher_Sent(cipher) @ i & KU(cipher) @j)"
			
end