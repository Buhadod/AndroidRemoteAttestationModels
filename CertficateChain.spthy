theory CertificateChain  
begin

builtins: signing

functions: 
  check_rep/2,  get_rep/1, rep/2 [private],
  create_certificate/3,
  verify_certificate/2,
  get_public_key_certificate/1,
  get_signature_certificate/1,
  get_tbsInfo_certificate/1

equations:


    /*
      Input : 
        SubjectTBSCertificateInfo = TBS Certificate info as expalined in https://datatracker.ietf.org/doc/html/rfc5280
        SubjectPub : Subject public key
        Issuer: Issuer Secret key , For signing the certificate
    */
    create_certificate(SubjectTBSCertificateInfo,SubjectPup,IssuerSk) 
      = < SubjectTBSCertificateInfo, SubjectPup, sign(<SubjectTBSCertificateInfo, SubjectPup>,IssuerSk) >,

    /*
      Input : 
        Certificate.1  = Certificate of the subject need to verifed
        Certificate.2  = Certificate of the issuer to verfiy the subject certificate

        The certificate take the forms of :
            <TBSCertificateInfo, publicKey, signature >
        where:
            TBSCertificateInfo = TBS Certificate info as expalined in https://datatracker.ietf.org/doc/html/rfc5280
            publicKey = The certificate public key data
            signature : signature of the Subject's TBSCertificateInfo and publicKey signed via Issuer private key

        Note if IssuerSk = IssuerRootSk, then the issuer certficate is self signed certificate
    */
    verify_certificate( 
    < SubjectTBSCertificateInfo, pk(SubjectSk), sign(<SubjectTBSCertificateInfo, pk(SubjectSk)>,IssuerSk) >
     , < IssuerTBSCertificateInfo, pk(IssuerSk), sign(<IssuerTBSCertificateInfo, pk(IssuerSk)>,IssuerRootSk) >
          ) = true,

    /*
        Get public key of a certificate
        Input : 
          Certificate

        Return:
          Public key of the certificate
    */
      
    get_public_key_certificate( 
      < SubjectTBSCertificateInfo, pk(SubjectSk), sign(<SubjectTBSCertificateInfo, pk(SubjectSk)>,IssuerSk) >
          ) = pk(SubjectSk),
   /*
        Get Signature a certificate
        Input : 
          Certificate

        Return:
          Signature
    */
    get_signature_certificate( 
        < SubjectTBSCertificateInfo, pk(SubjectSk), sign(<SubjectTBSCertificateInfo, pk(SubjectSk)>,IssuerSk) >
          ) = sign(<SubjectTBSCertificateInfo, pk(SubjectSk)>,IssuerSk),

    /*
        Get TBS Info
        Input : 
          Certificate

        Return:
          Signature
    */
    get_tbsInfo_certificate( 
        < SubjectTBSCertificateInfo, pk(SubjectSk), sign(<SubjectTBSCertificateInfo, pk(SubjectSk)>,IssuerSk) >
          ) = SubjectTBSCertificateInfo

    


rule testGetPublicKey:
  let
    //creating CA Root certificate (self-signed)
    CARootCertificate = create_certificate('TBSCertificateInfo',pk(~rootSk),~rootSk)

    //Create a certificate issued by CA Root certificate
    SubjectCertificate = create_certificate('TBSCertificateInfo',pk(~subjectSk),~rootSk)
    
    //Extract Public key
    SubjectCertificatePup = get_public_key_certificate(SubjectCertificate)

  in
  [
    Fr(~rootSk),Fr(~subjectSk)
  ]
  --[AssertGetPublicKey(pk(~subjectSk),SubjectCertificatePup)]->
  []


rule testChainCertificate:
  let
    //creating CA Root certificate (self-signed)
    CARootCertificate = create_certificate('TBSCertificateInfo',pk(~rootSk),~rootSk)

    //Create a certificate issued by CA Root certificate
    SubjectCertificate = create_certificate('TBSCertificateInfo',pk(~subjectSk),~rootSk)
    
    //verify self-signed certificate
    verfication1 = verify_certificate(CARootCertificate,CARootCertificate)

    //verify certificate chain
    verfication2 = verify_certificate(SubjectCertificate,CARootCertificate)

  in
  [
    Fr(~rootSk),Fr(~subjectSk)
  ]
  --[AssertChainCertificate(verfication1,verfication2)]->
  []


rule testVerifyTamperedCertificate:
  let
    //creating CA Root certificate (self-signed)
    CARootCertificate = create_certificate('TBSCertificateInfo',pk(~rootSk),~rootSk)

    //Create a certificate issued by CA Root certificate
    SubjectCertificate = create_certificate('TBSCertificateInfo',pk(~subjectSk),~rootSk)
    
    //Craft certificate with invalid TBS info
    
        //Extract Public key
        SubjectCertificatePup = get_public_key_certificate(SubjectCertificate)

        //Extract Signature
        SubjectCertificateSignature = get_public_key_certificate(SubjectCertificate)

        //Craft the fake certificate
        fakeCertificate = <'FakeInfoTBSCertificateInfo', SubjectCertificatePup,SubjectCertificateSignature>

    //Verfiy the certificate using issuer certificate
    verfication = verify_certificate(fakeCertificate,CARootCertificate)

  in
  [
    Fr(~rootSk),Fr(~subjectSk)
  ]
  --[AssertVerifyTamperedCertificate(verfication)]->
  []


rule testChainCertficateWithExtensions:
  let
    //creating CA Root certificate (self-signed)
    CARootCertificate = create_certificate(<'TBSCertificateInfo',~root_id>,pk(~rootSk),~rootSk)

    //Create a certificate issued by CA Root certificate
    SubjectCertificate = create_certificate(<'TBSCertificateInfo',~subject_id>,pk(~subjectSk),~rootSk)
    
    //verify self-signed certificate
    verfication1 = verify_certificate(CARootCertificate,CARootCertificate)

    //verify certificate chain
    verfication2 = verify_certificate(SubjectCertificate,CARootCertificate)

  in
  [
    Fr(~rootSk),Fr(~subjectSk),
    Fr(~root_id),Fr(~subject_id)
  ]
  --[AssertChainCertficateWithExtensions(verfication1,verfication2)]->
  []
lemma testChainCertificate: exists-trace "Ex  #i  . AssertChainCertificate(true,true) @i "

lemma testGetPublicKey: exists-trace "Ex ppk #i  . AssertGetPublicKey(ppk,ppk) @i "

lemma testVerifyTamperedCertificate: exists-trace "not Ex #i . AssertVerifyTamperedCertificate(true) @i "

lemma testChainCertficateWithExtensions: exists-trace "Ex #i  . AssertChainCertficateWithExtensions(true,true) @i "

end