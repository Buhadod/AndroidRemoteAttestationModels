theory KnoxV3
begin

builtins: asymmetric-encryption, signing

/* We formalize the following protocol

    1. Developer -> Vender   : arid, apikey
    2. Vender -> Developer   : N_v, apikey
    3. Developer -> App      : N_v,auk,arid
    4. App -> SecWorld       : N_v,auk
    5. SecWorld -> Vender    : Stmt = <N_s, measurement, deviceID>, E_venderPubKey(Sign_secWorldSignKey(Stmt),Stmt) i.e (blob), auk
    6. Vender -> SecWorld    : uid
    7. SecWorld -> App       : uid
    8. App -> Developer      : uid, arid, N_v, apikey
    9. Developer -> Vender   : uid, arid, N_v, apikey
    10. Vender -> Developer   : stmt
    11. Developer -> App     : secret
*/

/*
  Assumiption:
  

*/

/* Set up rules */
rule CreateVender:
  [ 
    Fr(~venderPrivKey)
  ]
  --[ ]->
  [
    !VenderKeys(~venderPrivKey, pk(~venderPrivKey)),
    !VenderInfo(pk(~venderPrivKey))
  ]

rule VenderComprimse:
  [ 
    !VenderKeys(venderPrivKey, venderPubKey)
  ]
  --[ VenderComprimsed(venderPubKey) ]->
  [
    Out(<venderPrivKey, venderPubKey>)
  ]

rule CreateDevice:
  [ 
    Fr(~deviceID), Fr(~secWorldSignKey),
    !VenderKeys(venderPrivKey, venderPubKey)
  ]
  --[ ]->
  [
    !SecureWorldInfo(~deviceID,venderPubKey,~secWorldSignKey),
    !VenderDevicesInfo(venderPrivKey, ~secWorldSignKey, ~deviceID) 
  ]

rule SecWorldComprimse:
  [ 
    !SecureWorldInfo(deviceID,venderPubKey,~secWorldSignKey)
  ]
  --[ SecWorldComprimsed(deviceID) ]->
  [
    Out(<deviceID>)
  ]

  rule CreateDeveloper:
  [ 
    Fr(~apiKey), Fr(~auk), 
    !VenderInfo(venderPupKey)
  ]
  --[ ]->
  [
    !DeveloperInfo(venderPupKey, ~apiKey, ~auk),
    !VenderDeveloperInfo(venderPupKey, ~apiKey, ~auk)
  ]

rule DevComprimse:
  [ 
    !DeveloperInfo(venderPupKey, apiKey, auk)
  ]
  --[ DevComprimsed(apiKey, auk) ]->
  [
     Out(<apiKey, auk>)
  ]


  rule CreateApp:
  [
    Fr(~appSHA), Fr(~secret),
    !DeveloperInfo(venderPupKey,apiKey, auk)
  ]
  --[ ]->
  [
    !AppSecret(~appSHA, ~secret, apiKey, auk), 
    !AppInfo(~appSHA, apiKey, auk)
  ]

/* Installation rules*/

rule Install_App_in_Device:
  [
    !AppInfo(appSHA, apiKey, auk),
    !SecureWorldInfo(deviceID,venderPubKey,secWorldSignKey)
  ]
  --[ Install_App_in_Device(appSHA, apiKey, auk, deviceID)]->
  [
    !AppInstallation(appSHA, apiKey, auk, deviceID)
  ]

/* Protocol rules*/
rule Dev_to_Ven_1:
    [
      Fr(~arid),
      !DeveloperInfo(venderPupKey, apiKey, auk)
    ]
  --[ 
       St_Developer_to_Vendor_1(~arid,apiKey, auk)
    ]->
    [ 
      Out( <~arid, apiKey> )
    ]

rule Ven_to_Dev_2:
    [
      In(<arid, apiKey>),
      Fr(~nv),
      !VenderDeveloperInfo(venderPupKey, apiKey, auk)
    ]
  --[ 
       St_Vendor_to_Developer_2(~nv, arid, apiKey, auk)
    ]->
    [ 
      Out( <~nv, arid, apiKey> )
    ]

rule Dev_to_App_3:
    [
      In(<nv, arid, apiKey>),
      !DeveloperInfo(venderPupKey,apiKey, auk)
    ]
  --[ 
      St_Developer_to_App_3(nv, arid, apiKey, auk)
    ]->
    [ 
      Out( <nv, arid, apiKey, auk> )
    ]

rule App_to_SecWorld_4:
    [
      In(<nv, arid, apiKey, auk>),
      !AppInstallation(appSHA, apiKey, auk, deviceID)
    ]
  --[ 
      St_App_to_SecWorld_4(nv, arid, apiKey, auk, appSHA, deviceID)
    ]->
    [ 
      !Secure_Channel_App_to_SecWorld(nv, auk, appSHA, deviceID),
      !App_to_SecWorld_4(nv, arid, apiKey, auk)
    ]

rule SecWorld_to_Ven_5:
    
    let blob = aenc(sign (<'NotRooted',nv, deviceID, appSHA>,secWorldSignKey), venderPubKey)

    in
    [
      !AppInfo(appSHA, apiKey, auk),
      !Secure_Channel_App_to_SecWorld(nv, auk, appSHA, deviceID),
      !SecureWorldInfo(deviceID,venderPubKey,secWorldSignKey)
    ]
  --[ 
      St_SecWorld_to_App_5(blob)
    ]->
    [ 
      Out(<blob,auk>)
    ]

rule Ven_to_SecWorld_6:
    
    let blob = aenc(sign (<'NotRooted',nv, deviceID, appSHA>,secWorldSignKey), venderPubKey)

    in
    [
      In(<blob, auk>),
      Fr(~uid),
      !VenderKeys(venderPrivKey, venderPubKey),
      !VenderDevicesInfo(venderPrivKey, secWorldSignKey, deviceID) 
    ]
  --[ 
      St_Ven_to_SecWorld_6('NotRooted', nv, deviceID, appSHA, ~uid)
    ]->
    [ 
      Out(<~uid,auk>),
      !VenderStatment('NotRooted', nv, deviceID, appSHA, ~uid)
    ]


rule SecWorld_to_App_7:
    [
      In(<uid,auk>),
      !AppInfo(appSHA, apiKey, auk),
      !SecureWorldInfo(deviceID,venderPubKey,secWorldSignKey)
    ]
  --[ 
      St_SecWorld_to_App_7(apiKey, auk, appSHA)
    ]->
    [ 
      !Secure_Channel_SecWorld_to_App(uid,auk, appSHA)
    ]

rule App_to_Dev_8:
    [
      !Secure_Channel_SecWorld_to_App(uid,auk, appSHA),
      !AppInstallation(appSHA, apiKey, auk, deviceID),
      !App_to_SecWorld_4(nv, arid, apiKey, auk)
    ]
  --[ 
      St_App_to_Dev_8(uid,nv, arid, apiKey, auk, appSHA)
    ]->
    [ 
      Out(<uid, nv, arid, apiKey>)
    ]

rule Dev_to_Ven_9:
    [
      In(<uid, nv, arid, apiKey>)
    ]
  --[ 
      St_App_to_Dev_9(uid, nv, arid, apiKey)
    ]->
    [ 
      Out(<uid, nv, arid, apiKey>)
    ]

rule Ven_to_Dev_10:
    [
      In(<uid, nv, arid, apiKey>),
      !VenderKeys(venderPrivKey, venderPubKey),
      !VenderDevicesInfo(venderPrivKey, secWorldSignKey, deviceID),
      !VenderDeveloperInfo(venderPubKey, apiKey, auk),
      !VenderStatment('NotRooted', nv, deviceID, appSHA, uid)
    ]
  --[ 
      St_Ven_to_Dev_10('NotRooted', nv, deviceID, appSHA, uid,arid, auk)
    ]->
    [ 
      Out(<'NotRooted', nv, deviceID, appSHA, uid, arid, auk, apiKey>)
    ]

rule Dev_to_App_11:
    [
      In(<'NotRooted', nv, deviceID, appSHA, uid, arid, auk, apiKey>),
      !AppSecret(appSHA,secret, apiKey, auk),
      !DeveloperInfo(venderPupKey,apiKey, auk)
    ]
  --[ 
      St_Dev_to_App_11(nv, uid, arid, auk, apiKey, secret)
    ]->
    [ 
      Out(<secret>)
    ]

lemma executable:
  exists-trace 
  " Ex #i nv uid arid auk apiKey secret.
      St_Dev_to_App_11(nv, uid, arid, auk, apiKey, secret) @ i "

end