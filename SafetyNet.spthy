theory SafetyNetProtocol
begin

builtins: asymmetric-encryption, signing


/* test TLS

1.    C →S : NC
2.    S →C : NS , CertS
3.    C →S : ES(K_seed), {Hash1}KCS
4.    S →C : {Hash2}KCS

*/

rule CreateServer:
  [ 
    Fr(~ServerPrivKey)
  ]
  --[ ]->
  [
    GetCertficateKeys(~ServerPrivKey)
  ]

rule ClientHello:
  [ 
    Fr(~nc)
  ]
  --[ ]->
  [
    Out(~nc)
  ]


rule ServerHello:
  [ 
    In(nc),
    Fr(~ns),
    GetCertficateKeys(ServerPrivKey)
  ]
  --[ ]->
  [
    Out(<pk(ServerPrivKey),ns>)
  ]

  rule ClientHello2:
    let encryptedSeed  = aenc(~seed, ServerPupKey)
    let sessionKeyHash = h(<~seed,ns>);
    in
    [ 
        In(<ServerPupKey,ns>),
        Fr(~seed),
    ]
    --[ ]->
    [
        Out(<encryptedSeed,sessionKeyHash>)
        //save session key to this server.
    ]

  rule ServerHello2:

    let encryptedSeed  = aenc(seed, pk(ServerPrivKey))
    let sessionKeyHash = h(<seed,ns>);
    in
    [ 
        GetCertficateKeys(ServerPrivKey),
        In(<encryptedSeed,sessionKeyHash>)
        //todo record ns from before and get it here.
    ]
    --[ ]->
    [
        //save session key for this client
    ]