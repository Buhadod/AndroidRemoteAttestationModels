/*******************************************************************************
	Remote attestation Framework
	AUTHORS
	
	
*******************************************************************************/

theory Framework_KnoxV2
begin

builtins: signing, asymmetric-encryption, locations-report

heuristic: S

functions: 
	equal/2, and/2

predicates:
	Report(x,y) <=> not  (fst(y)= 'loc')
      
equations: 
	equal(x,x)=true,
	and(true,true)= true


/***************************************** Generic *****************************************/

let AppCode = 
	[Nonce_TLS_Ch(devId,nonce)]--[]-> [];

	event NonceReceivedAtApp(nonce);

	//attestation_agent send app data to secure world to start an attestation
	new ~sessionID;
	[]--[]-> [SecureWorld_Ch_In(~sessionID,~deviceId,swId,nonce,'App1PackageName','App1Content',sign(<'App1PackageName','App1Content',pk(advk)>,advk))];
	[ SecureWorld_Ch_Out(~sessionID,blob) ]--[]-> [];

	[]--[]-> [Blob_TLS_Ch(blob)];
	event Checked('HonestAppFinished');
	0


let HonestAppInstallation =
	event Checked('HonestAppInstallation');
	//install an application
	[!App_Published(devId,<'App1PackageName','App1Content',pk(advk),
	                   sign(<'App1PackageName','App1Content',pk(advk)>,advk)>)]--[]-> [];

	event Application_Installed(~deviceId,'App1PackageName',sign(<'App1PackageName','App1Content',pk(advk)>,advk));

	!AppCode //App code separate from installation 


let ArbitraryAppCode =
	in(nonce);
	event NonceReceivedAtArbApp(nonce);
	//attestation_agent send app data to secure world to start an attestation
	new ~sessionID;
	[]--[]-> [SecureWorld_Ch_In(~sessionID,~deviceId,swId,nonce,packagename,~content,appSignature)];
	[ SecureWorld_Ch_Out(~sessionID,blob) ]--[]-> [];
	out(blob);
	event Checked('ArbitraryAppFinished');
	0

let ArbitraryAppInstallation =
	event Checked('ArbitraryAppInstallation');
	//install an application
	in(<packagename, devKey>); //Attacker can pick the app name and the dev key.

	new ~content;  //contents are different from any honest app, so we model as a free name

	let appSignature = sign(<packagename,~content,pk(devKey)>,devKey) in
	let app = <packagename,~content,pk(devKey),appSignature> in
	out(app);
	event Arbitrary_App_Created(packagename,appSignature);
	event Application_Installed(~deviceId,packagename,appSignature);

	!ArbitraryAppCode


let Device =

	//Create device reference
	new ~deviceId;   

	//send the device reference , allows an adversary to tamper the device
	out(~deviceId);
	
	//setup a secureWorld
	[]--[]-> [SetUPSW(~deviceId)];
	[FinishSetUPSW(~deviceId,swId)]--[]->[];
	event Checked('SettingUpDeviceFinished');

	(!HonestAppInstallation | !ArbitraryAppInstallation) 



let RelayAttacker1 = 
	[Nonce_TLS_Ch(devId,nonce)]--[]-> [];
	out(nonce);
	0

let RelayAttacker2 = 
	in(blob);
	[]--[]-> [Blob_TLS_Ch(blob)];
	0


/***************************************** Knox V2 *****************************************/

let AtServerKV2 =
	!(

		//retrieve the blob from the developer server and verify it
        [Attestation_Server_Ch_In(sid,<atId,nonce,hardwareMeasurement,report,reportSignature>)]--[]-> [];

		//checking the blob location
		let locationCheck = equal( <atId,nonce,hardwareMeasurement>  , check_rep(report,<'loc',pk(~skAT)>)) in
		
		//checking the signature of the blob
		let signatureCheck = equal(verify(reportSignature, report,pk(~skAT)), true) in
		
		//check if both true
		let result = and(locationCheck, signatureCheck) in

		if result = true  then
			//create a verdict  and send it to the developer server
			let verdict = 'valid' in
			[]--[]-> [Attestation_Server_Ch_Out(sid,verdict)];
			event Checked('AttestationServerFinished_valid');
			0 
		else
			//create a verdict  and send it to the developer server
			let verdict = 'invalid' in
			[]--[]-> [Attestation_Server_Ch_Out(sid,verdict)];
			event Checked('AttestationServerFinished_invalid');
			0
			


		
	)


let KnoxV2TA =

	(
	new ~swId; // We have different secure world and device ID, because it's possible to make different devices have the same ID, therefore 

	//setup a SecureWorld
	[SetUPSW(deviceId)]--[]->[FinishSetUPSW(deviceId,~swId)];

	//attempt to unlock bootloader
	in(attempt);

	!(
		//attestation_agent send app data to secure world, start an attestation
		[SecureWorld_Ch_In(sessionID, deviceId,~swId,nonce,packagename,content,appSignature)]--[]->[];

		new ~atId; // attestation id
		event Attestating_App(~atId,packagename,appSignature,deviceId);

		if attempt = 'unlockBootloader' then
			let hardwareMeasurement = 'invalid' in
			// Software measurment not used in Knox
			//in(customSoftwareMeasurement);
			//let softwareMeasurement =  customSoftwareMeasurement in
			in(<fnonce>);	// adversary's custom softeware-based values
			let report = report(<~atId,fnonce,hardwareMeasurement>) in 
			let blob = <~atId, fnonce, hardwareMeasurement, report,sign(report,~skAT)> in
			event BlobCreated(blob);

			///return attestation report to the app
			event DeviceStatus(~atId,deviceId,hardwareMeasurement);
			event Attestating_App_Device(~atId,deviceId,packagename,appSignature,hardwareMeasurement);
			
			out(blob);
			[]--[]->[ SecureWorld_Ch_Out(sessionID,blob) ];
			event Checked('SecureWorldAppFinished_rooted_device');
			0
		else
			let hardwareMeasurement = 'valid' in
			let report = report(<~atId,nonce,hardwareMeasurement>) in 
			let blob = <~atId,nonce,hardwareMeasurement, report,sign(report,~skAT)> in
			///return attestation report to the app
			event DeviceStatus(~atId,deviceId,hardwareMeasurement);
			event Attestating_App_Device(~atId,deviceId,packagename,appSignature,hardwareMeasurement);
			event BlobCreated(blob);
			[]--[]->[ SecureWorld_Ch_Out(sessionID,blob) ];
			event Checked('SecureWorldAppFinished_locked_device');
			0
			
	)
	
	)@<'loc',pk(~skAT)>


let DevServerProtocolCode =
	
	// create a nonce
	new ~nonce;
	event NonceGenerated(~nonce);
	new ~requestID;
    event BlobRequested(~requestID);
	[]--[]-> [Nonce_TLS_Ch(~devId,~nonce)];

	//retrieve blob from clients
	[Blob_TLS_Ch(<atId,~nonce,hardwareMeasurement, report,reportSignature>)]--[]-> [];
	let blob = <atId,~nonce,hardwareMeasurement, report,reportSignature> in

	event NonceReceived(~nonce);

	//create developer-attestation server session id, to keep track or pair of request-response message  
	new ~sid;
	[]--[]-> [Attestation_Server_Ch_In(~sid,blob)];	// securely send blob to the attestation server

	//retrieve the verified report the attestation server, pattern matching is used for checking the status
	[Attestation_Server_Ch_Out(~sid,verdict)]--[]-> [];

	//attestation finished	//because measurement miss app info. so we assume always invalid	
	event Verdict_app(atId,blob,verdict,hardwareMeasurement); 
	event Checked('DeveloperServerfinished');
	if verdict = 'valid' then
		event BlobAccepted(blob);
		event RequestedBlobAccepted(~requestID,blob)
	else
		0


let DevServerKV2 =

	//creating and publishing the application
	new ~advk; // Dev server signing key
	new ~devId; 

	let appSignature = sign( <'App1PackageName','App1Content',pk(~advk)>,~advk) in 
	let app = <'App1PackageName','App1Content',pk(~advk),appSignature> in
	out(app);
	event App_Created('App1PackageName',appSignature);

	[]--[]-> [!App_Published(~devId,app)];
	
	!DevServerProtocolCode


/*************************************** Generic code *************************************************/
	
// Main process starts here

/***************************************** choose a platform ***************************************************
* platform				|		SafetyNet			|		KnoxV2		|	KnoxV3			|	Key Attestation
* --------------------------------------------------------------------------------------------------------------
* AttestationAgent		: GooglePlay | SafetyNetTA	|	KnoxV2TA		|	KnoxV3TA		|	KeyMasterTA
* AtServer				:		AtServerSN			|	AtServerKV2		|	AtServerKV3		|	AtServerKA
* DevServer				:		DevServerSN			|	DevServerKV2	|	DevServerKV3	|	DevServerKA
***************************************************************************************************************/


let AttestationAgent =
	KnoxV2TA

let AtServer = 
	AtServerKV2

let DevServer = 
	DevServerKV2

//create pair attestation keys to be used by secureWorld for signing, and attestation server for verification
new ~skAT;

(!Device || !DevServer || AtServer || !AttestationAgent || !RelayAttacker1 || !RelayAttacker2)

//for all valid verdict => honest apps must created, installed, attested in a valid device and KU does know its attestation report
lemma DeviceAndAppIntegrity:
	"(All atId blob #i. Verdict_app(atId,blob,'valid','valid') @ i ==> 
	( 
	 (Ex deviceId packagename appSignature #a #b #c. 
			 App_Created(packagename,appSignature) @ a
			 & Application_Installed(deviceId,packagename,appSignature) @ b
			 & Attestating_App_Device(atId,deviceId,packagename,appSignature,'valid')@ c & c < i
		)
	))"

//for all valid verdict =>  Ku should not know its attestation report by any mean
lemma AttestationReportSecrecy:
	"(All atId blob #i. Verdict_app(atId,blob,'valid','valid') @ i ==> 
	 (	not( Ex #k. KU(blob) @ k & k<i ) )
	)"


//Check if nonce are unique
// lemma UniqueNonce:
// 	"All n #i #j. NonceReceived(n) @i & NonceReceived(n) @j ==> #i=#j"

/// Check if accepted blobs are unique 
lemma UniqueBlob:
"All n #i #j.  BlobAccepted(n) @i & BlobAccepted(n) @j ==> #i=#j"

// Check if the blob generated recently
lemma BlobRecentness:
    "All requestID blob #i. RequestedBlobAccepted(requestID,blob) @i ==> 
	  Ex #j. BlobRequested(requestID)@j & Ex #k. BlobCreated(blob)@k & #j < #k & #k < #i" 

//Sanity check: Will the dev server ever accept a blob
lemma Correctness_AcceptBlob:
exists-trace
"Ex n #i. BlobAccepted(n)@i"

//Sanity check: Attestation finished with valid device integirty and application integirty. 
lemma Correctness_Valid_Attestation:
exists-trace
"Ex atId blob #i. Verdict_app(atId,blob,'valid','valid') @ i"

//Sanity check: Attestation finished with at least failed device integirty
lemma Correctness_Rooting_Device:
exists-trace
"Ex atId blob #i. Verdict_app(atId,blob,'valid','invalid') @ i"

//Sanity check: Setting up a device's secure world 
lemma Correctness_Setting_Up_Device:
exists-trace
"Ex #i. Checked('SettingUpDeviceFinished') @ i"

//Sanity check: Creation of an honest application 
lemma Correctness_Honest_App:
exists-trace
"Ex #i. Checked('HonestAppInstallation') @ i"

//Sanity check: Creation of an arbitrary application 
lemma Correctness_Arbitrary_App:
exists-trace
"Ex #i. Checked('ArbitraryAppInstallation') @ i"

//Sanity check: An honest application can finish
lemma Correctness_Honest_App_Finished:
exists-trace
"Ex #i. Checked('HonestAppFinished') @ i"

//Sanity check: An arbitrary application can finish
lemma Correctness_Arbitrary_App_Finished:
exists-trace
"Ex #i. Checked('ArbitraryAppFinished') @ i"

//Sanity check: Secure world app can finish in a rooted device
lemma Correctness_Secure_World_Finished_ROOTED:
exists-trace
"Ex #i. Checked('SecureWorldAppFinished_rooted_device') @ i"

//Sanity check: Secure world app can finish in a locked device
lemma Correctness_Secure_World_Finished_LOCKED:
exists-trace
"Ex #i. Checked('SecureWorldAppFinished_locked_device') @ i"

//Sanity check: Attestation Server can finish with a verfied report 
lemma Correctness_Attestation_Server_Finished_VALID:
exists-trace
"Ex #i. Checked('AttestationServerFinished_valid') @ i"

//Sanity check: Attestation Server can finish with an invalid report 
lemma Correctness_Attestation_Server_Finished_INVALID:
exists-trace
"Ex #i. Checked('AttestationServerFinished_invalid') @ i"

//Sanity check: Developer server can finish
lemma Correctness_Developer_Server_Finished:
exists-trace
"Ex #i. Checked('DeveloperServerfinished') @ i"

end

==============================================================================
summary of summaries:

analyzed: KnoxV2.sapic

	DeviceAndAppIntegrity (all-traces): falsified - found trace (6 steps)
	AttestationReportSecrecy (all-traces): falsified - found trace (6 steps)
	UniqueBlob (all-traces): verified (28 steps)
	BlobRecentness (all-traces): verified (13 steps)
	Correctness_AcceptBlob (exists-trace): verified (4 steps)
	Correctness_Valid_Attestation (exists-trace): verified (3 steps)
	Correctness_Rooting_Device (exists-trace): verified (4 steps)
	Correctness_Setting_Up_Device (exists-trace): verified (4 steps)
	Correctness_Honest_App (exists-trace): verified (4 steps)
	Correctness_Arbitrary_App (exists-trace): verified (4 steps)
	Correctness_Honest_App_Finished (exists-trace): verified (4 steps)
	Correctness_Arbitrary_App_Finished (exists-trace): verified (4 steps)
	Correctness_Secure_World_Finished_ROOTED (exists-trace): verified (4 steps)
	Correctness_Secure_World_Finished_LOCKED (exists-trace): verified (4 steps)
	Correctness_Attestation_Server_Finished_VALID (exists-trace): verified (4 steps)
	Correctness_Attestation_Server_Finished_INVALID (exists-trace): verified (6 steps)
	Correctness_Developer_Server_Finished (exists-trace): verified (4 steps)


==============================================================================