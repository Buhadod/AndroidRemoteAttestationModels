theory KnoxV2_locations
begin

builtins:
	//symmetric-encryption,
	//ultiset,
	//hashing,
	//signing,
	//asymmetric-encryption,
    locations-report
    




let RootStatusManager =
    in(status);
    lock <'device', ~id>;
    insert <'device', ~id>, 'rooted';
    event DeviceStatus(status);
    unlock <'device',~id>;
    0
                


let SecureWorld =
    !(
        in(nonce);
        (
            lock <'device', ~id>;
            lookup <'device', ~id> as measurement in
            let blob = report(<~id, measurement, nonce>) in
            out (<~id, blob>);
            unlock <'device', ~id>;
            0
        )@<'TrustZone', ~id>
    )
 
let RepackedApp =
    event RepackedAppStarts(~id);
    in(~deviceChannel, nonce);
    event ReceivedNonce(nonce);
    event Debug1();
    out(nonce);
    in(<~id, blob>);
    out(~deviceChannel, <~id, blob>);
    in(~deviceChannel, secret);
    event RepackedAppReceives(secret);
    0


let YourApp =
    //new ~pkgName;
    //out(~pkgName);
    event YourAppStarts(~id);
    in(~deviceChannel, nonce);
    event ReceivedNonce(nonce);
    out(nonce);
    //out(<nonce, ~pkgName>);
    in(<~id, blob>);
    out(~deviceChannel, <~id, blob>);
    in(~deviceChannel, secret);
    event YourAppReceives(secret);    
    0

let Device =
    new ~id;
    out(~id);
    insert <'device', ~id>, 'nonRooted';
    (!SecureWorld | !(YourApp + RepackedApp))
    




let YourServer =
    !(
        in(~serverChannel, nonce);
        out(~deviceChannel, nonce);
        
        in(~deviceChannel, <id, blob>);
        out(~serverChannel, <id, blob>);

        in(~serverChannel, veredict);

        if veredict = <id, 'veredictOK'> then
            event VeredictOK(id);
            new ~secret;
            event YourServerSends(~secret);
            out(~deviceChannel, ~secret)
        else
            event VeredictNoOK(id)
    )

let AttestServer =
    !(
        new ~nonce;
        event GeneratedNonce(nonce);
        out(~serverChannel, ~nonce);
        
        in(~serverChannel, <id, blob>);

        if <id, 'nonRooted', ~nonce> = check_rep(blob, <'TrustZone', id>) then
            event AttestServerVeredictOk(id);
            out(~serverChannel, <id, 'veredictOK'>)
        else
            event AttestServerVeredictNotOk(id);
            out(~serverChannel, <id, 'veredictNotOK'>)
           
    )


new ~serverChannel;
new ~deviceChannel;

//new ~ssk_AttestServer;
//let spk_AttestServer = pk(~ssk_AttestServer) in
//out(spk_AttestServer);

(Device | YourServer | AttestServer)



lemma Debug1:
    exists-trace
    "Ex #i. Debug1()@i"


// Ideally should be true
// but it will be falsified
lemma NotRepackedAppReceivesSecret:
    "(not (Ex secret #i #j. YourServerSends(secret)@i & RepackedAppReceives(secret)@j))"


// Ideally should be true
// It will be verified
//lemma NotRootedDeviceReceivesSecret:
//    "(not Ex secret #i #j. YourServerSends(secret)@i & YourAppReceives(secret)@j & DeviceIsRooted()"


//"YourAppReceives(..) ==> YourServerSends(secret) & not DeviceIsRooted()"

//"RepackedAppReceives(..) ==> YourServerSends(secret) & not DeviceIsRooted()"

// rooted device + repacked app  ---> youwserver will not send secret



// nonrooted device + repacked app    leak secret, leak blob

// rooted device + repacked app uses blob to receive secret.
    
    
    
end


