/*******************************************************************************
	Knox v2
	AUTHORS
	
	Sample message using SAPIC
	

	Protocol:
	1. C -> S: aenc(k, pkS)
	2. C <- S: h(k)

	Notation:
	
	pmk = Pairwise Master Key
	ptk = Pairwise Transient Key, composed of:
		kck = Key Confirmation Key
		kek = Key Encryption Key
		tk = Temporal Key
	gtk = Group Temporal Key
	
	A_  = Events only in authenticator process
	S_  = Events only in supplicant process
	
*******************************************************************************/

theory KnoxV2
begin

builtins:
	symmetric-encryption,
	multiset,
	hashing,
	signing,
	asymmetric-encryption


let SecureWorld =
//	new ~S_id;
//	out(~S_id);
	new ~skS;

	let pkS = pk(~skS) in

	insert 'skS', ~skS; 
	new ~deviceId;
	
	!(
		in(<nonce,'toSW'>);
		let blob = aenc(sign (<'NotRooted',nonce, ~deviceId>,~skS), pkT) in 
	
		out(<blob,'toApp'>);
		event S_finish()
	)

let App =
//	new ~A_id;
//	out(~A_id);

	new ~appSignature;
	new ~packageName;

	//Read from DevServer
	lookup 'apikey' as apikey in 

	!(
		in(<apikey,nonce,'toApp'>);
		out(<nonce,'toSW'>);

		in(<blob,'toApp'>);

		//adversary can obtain this msg and do MITM
		out(<apikey,nonce,blob,'toDevServer'>);

		event A_finish()
	)


let DevServer =
//	new ~D_id;
//	out(~D_id);

	new ~apikey;
	insert 'apikey', ~apikey; 


	!(
		in(<~apikey,nonce>);
		out(<~apikey,nonce,'toApp'>);

		in(<~apikey,nonce,blob,'toDevServer'>);

		out(<~apikey,nonce,blob,'toAtServer'>);

		in(<~apikey, stmt, 'toDevServer'>);

		event D_finish() 
	)
	
let AtServer =
//	new ~T_id;
//	out(~T_id);
	
	!(
		// Read from DevServer
		lookup 'apikey' as apikey in   

		// Read from SecureWorld
		lookup 'skS' as skS in  

		new ~nonce;

		out(<apikey,~nonce>);
		// <apikey, nonce, blob, device id>
		in(<apikey,~nonce,aenc(sign (<'NotRooted',~nonce, deviceId>,skS), pkT),'toAtServer'>);

		let stmt = <'NotRooted',~nonce, deviceId> in

		out(<apikey, stmt,'toDevServer'>);

		event T_finish() 
	)

// Main process starts here
new ~skT;
let pkT = pk(~skT) in
(!SecureWorld ||!App || !DevServer || AtServer )

lemma Correctness_D:
exists-trace
	"Ex #i. D_finish()@i"

lemma Correctness_S:
exists-trace
	"Ex #i. S_finish()@i"

lemma Correctness_A:
exists-trace
	"Ex #i. A_finish()@i"

lemma Correctness_T:
exists-trace
	"Ex #i. T_finish()@i"

end

/*
==============================================================================
summary of summaries:

analyzed: KnoxV2.sapic

  Correctness_D (exists-trace): verified (9 steps)

==============================================================================
*/