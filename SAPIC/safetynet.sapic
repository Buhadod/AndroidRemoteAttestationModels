theory Safetynet
begin

builtins:
    locations-report,
    symmetric-encryption

    



/*
let RootStatusManager =
    in(status);
    lock <'device', ~id>;
    insert <'device', ~id>, 'rooted';
    event DeviceStatus(status);
    unlock <'device',~id>;
    0
  */              


let PlayService =
    !(
        in(~secureChannel,nonceSW);
        
        //lock <'device', ~id>;
        //new ~blob;
        let blob = senc(~key,nonceSW) in
        out(~secureChannel,<~id, blob>);
        //unlock <'device', ~id>;
        0
       
    )
 
let RepackedApp =
    
    !(
    event RepackedAppStarts(~id);
    in(~deviceChannel, nonceRA);

    event Debug1();
    event ReceivedNonce(nonceRA);
    
    
    out(~secureChannel,nonceRA);

    
    in(~secureChannel,<~id, blob>);
    //event ReceivedBlob(blob);
    event Debug2();

    out(~deviceChannel, <~id, blob>);
    
    
    in(~deviceChannel3, secret);
    
    event ReceivedSecret(secret);
    
    event RepackedAppReceives(secret);
    
    
    0
    )
    /*0
*/
let YourApp =
    
    event YourAppStarts(~id);
    in(~deviceChannelA, nonceA);

    /*
    event ReceivedNonce(nonceA);

    out(nonceA);
    
    
    in(~secureChannel,<~id, blob>);
    event ReceivedBlob(blob);
    
    out(~deviceChannel2, <~id, blob>);
    
    in(~deviceChannel3, secret);
    
    event YourAppReceives(secret);
    */
    0
    /*
*/
    

let Device =    
    new ~id;
    event GenerateID(~id);
    insert <'device', ~id>, 'nonRooted';
    (!PlayService| !RepackedApp)
    
    //out(~id);


let YourServer =
    !(
        in(~serverChannel, nonceS);

        out(~deviceChannel, nonceS);
        //out(~deviceChannelA, nonce);
    
        
        in(~deviceChannel, <id, blob>);
        event Debug3();
        //event ReceivedBlob(blob);     
        
        
        out(~serverChannel2, <id, blob>);
        //ok
        
        in(~serverChannel3, <id, verdict>);
        
        new ~secret;
        event GeneratedSecret(~secret);
        out(~deviceChannel3, ~secret);
        
        0
        /*
        if veredict = <id, 'veredictOK'> then
            event VeredictOK(id);
            new ~secret;
            event YourServerSends(~secret);
            out(~deviceChannel3, ~secret)
        else
            event VeredictNoOK(id)
    
    */
    
    )

let AttestServer =
    !(
        new ~nonce;
        event GeneratedNonce(~nonce);
        out(~serverChannel, ~nonce);
       
        in(~serverChannel2, <id, senc(~key,~nonce)>);
        
        
        out(~serverChannel3, <id, 'veredictOK'>);
        /*
        if <id, 'nonRooted', ~nonce> = check_rep(blob, <'TrustZone', id>) then
        */
        
        
        

        0
        /*
        if <id, 'nonRooted', ~nonce> = check_rep(blob, <'TrustZone', id>) then
            event AttestServerVeredictOk(id);
            out(~serverChannel, <id, 'veredictOK'>)
        else
            event AttestServerVeredictNotOk(id);
            out(~serverChannel, <id, 'veredictNotOK'>)
        
        */
    )


new ~serverChannel;
new ~serverChannel2;
new ~serverChannel3;

new ~deviceChannel;
new ~deviceChannel2;
new ~deviceChannel3;


new ~secureChannel;
new ~key;

//new ~ssk_AttestServer;
//let spk_AttestServer = pk(~ssk_AttestServer) in
//out(spk_AttestServer);

(Device | !YourServer | !AttestServer)

lemma types [sources]:
    " 
    (All nonce #i.
       ReceivedNonce(nonce) @ i
        ==>
            ( 
                (Ex #j. KU(nonce) @ j & j < i)
                | (Ex #j. GeneratedNonce( nonce ) @ j)
            )
    )"

/*
lemma typesSecret [sources]:
    " 
    (All secret #i.
       ReceivedSecret(secret) @ i
        ==>
            ( 
                (Ex #j. KU(secret) @ j & j < i)
                | (Ex #j. GeneratedSecret(secret) @ j)
            )
    )"
*/

    /*
lemma types2 [sources]:
   "(All id #i.
       ReceivedID(id) @ i
        ==>
            ( 
                (Ex #j. KU(id) @ j & j < i)
                | (Ex #j. GenerateID(id) @ j)
            )
    )
    "
lemma types3 [sources]:  
    "(All blob #i.
       ReceivedBlob(blob) @ i
        ==>
            ( 
                (Ex #j. KU(blob) @ j & j < i)
                | (Ex #j. GeneratedBlob(blob) @ j)
            )
    )
    "
    */



lemma Debug1: exists-trace "Ex #i. Debug1()@i"
lemma Debug2: exists-trace "Ex #i. Debug2()@i"
lemma Debug3: exists-trace "Ex #i. Debug3()@i"
//lemma Debug4: exists-trace "Ex #i. Debug4()@i"



// Ideally should be true
// but it will be falsified
/*lemma NotRepackedAppReceivesSecret:
    "(not (Ex secret #i #j. YourServerSends(secret)@i & RepackedAppReceives(secret)@j))"
*/

// Ideally should be true
// It will be verified
//lemma NotRootedDeviceReceivesSecret:
//    "(not Ex secret #i #j. YourServerSends(secret)@i & YourAppReceives(secret)@j & DeviceIsRooted()"


//"YourAppReceives(..) ==> YourServerSends(secret) & not DeviceIsRooted()"

//"RepackedAppReceives(..) ==> YourServerSends(secret) & not DeviceIsRooted()"

// rooted device + repacked app  ---> youwserver will not send secret



// nonrooted device + repacked app    leak secret, leak blob

// rooted device + repacked app uses blob to receive secret.
    
    
    
end


