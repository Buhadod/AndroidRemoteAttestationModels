theory Knoxv2
begin

builtins:
    locations-report    

let RootKit =
    in(status);
    insert 'device', 'rooted';
    event DeviceStatus(status);
    0

let RepackProcess =
    in(status);
    insert 'hash', 'fakehash';
    event AppStatus(status);
    0

let SecureWorld =
    !(
        in(~secureChannel,nonceSW);
        event ReceivedNonce(nonceSW);
        
        lookup <'device'> as measurement in

        if measurement = 'valid' then
            event Debug2_S1();
            let blob = report(<~id, 'verdict_OK', nonceSW>) in
            out(~secureChannel2,blob);
            0
        else
            event Debug2_S2();
            let blob = report(<~id, 'verdict_INVALID', nonceSW>) in
            out(~secureChannel2,blob);
            0
            //keys will not leacked due to IEE
            
       
    )@<'TrustZone', ~id>
 
let YourApp =
    
    insert 'hash', 'valid';

    !(
        event AppStarts(~id);
        in(~deviceChannel, nonceA);
        
        event Debug1();
        
        out(~secureChannel,nonceA);
        
        in(~secureChannel2,blobA);

        event Debug2();

        out(~deviceChannel2, blobA);
        
        //if the app repacked, it can leaks nonce and blob
        lookup <'hash'> as hash in
        if hash = 'fakehash' then
            out(<nonceA,blobA>);
            event AppRepacked();
            0
        else
            event AppOrignal();
            0

    )

let Server = 
    !(
        new ~nonce;
        event GeneratedNonce(~nonce);
        event GeneratedKey(~key);
        
        out(~deviceChannel, ~nonce);
       
        in(~deviceChannel2,blob);

        if <~id, 'verdict_OK', ~nonce> = check_rep(blob, <'TrustZone', ~id>)  then
            event Debug3();
            0
        else
            event Debug5();
            0
        
       
    )



new ~deviceChannel;
new ~deviceChannel2;
new ~deviceChannel3;

new ~secureChannel;
new ~secureChannel2;

new ~key;

new ~id;

insert 'device', 'valid';


(!Server |!SecureWorld| !YourApp | !RootKit | !RepackProcess)
/*
lemma types [sources]:
    " 
    (All nonce #i.
       ReceivedNonce(nonce) @ i
        ==>
            ( 
                (Ex #j. KU(nonce) @ j & j < i)
                | (Ex #j. GeneratedNonce( nonce ) @ j)
            )
    )"
*/
lemma Debug1: exists-trace "Ex #i. Debug1()@i"
lemma Debug2: exists-trace "Ex #i. Debug2()@i"
lemma Debug3: exists-trace "Ex #i. Debug3()@i"

lemma Debug5: exists-trace "Ex #i. Debug5()@i"

lemma Debug2_S1: exists-trace "Ex #i. Debug2_S1()@i"
lemma Debug2_S2: exists-trace "Ex #i. Debug2_S2()@i"

lemma test: exists-trace "Ex key #j #kj . GeneratedKey(key)@j  & K(key)@kj"

end


