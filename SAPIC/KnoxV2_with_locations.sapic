theory KnoxV2_locations
begin

builtins:
	//symmetric-encryption,
	//ultiset,
	//hashing,
	//signing,
	//asymmetric-encryption,
    locations-report
    



/*
let RootStatusManager =
    in(status);
    lock <'device', ~id>;
    insert <'device', ~id>, 'rooted';
    event DeviceStatus(status);
    unlock <'device',~id>;
    0
  */              


let SecureWorld =
    
    
    !(
        in(nonceSW);

        (
            lock <'device', ~id>;
            lookup <'device', ~id> as measurement in
            let blob = report(<~id, measurement, nonceSW>) in
            
            event ReceivedID(~id);
            event GeneratedBlob(blob);
            out (~secureChannel,<~id, blob>);
           
            unlock <'device', ~id>;
            0
        )@<'TrustZone', ~id>
        
    )
 
let RepackedApp =
    
   
    event RepackedAppStarts(~id);
    in(~deviceChannel, nonceRA);

    event ReceivedNonce(nonceRA);
    out(nonceRA);
    
    
    in(~secureChannel,<~id, blob>);
    event ReceivedBlob(blob);
    
     
    out(~deviceChannel, <~id, blob>);
    
    
    in(~deviceChannel, secret);
    event RepackedAppReceives(secret);
    event Debug2();
    0

let YourApp =
    
    event YourAppStarts(~id);
    in(~deviceChannel, nonceA);
    
    
    event ReceivedNonce(nonceA);
    out(nonceA);
    

    in(~secureChannel,<~id, blob>);
    event ReceivedBlob(blob);
    
    
    out(~deviceChannel, <~id, blob>);
    
    
    in(~deviceChannel, secret);
    event YourAppReceives(secret); 

    0

let Device =    
    new ~id;
    event GenerateID(~id);
    //out(~id);
    insert <'device', ~id>, 'nonRooted';
    (!SecureWorld | !(YourApp + RepackedApp))




let YourServer =
    !(
        in(~serverChannel, nonce);

        out(~deviceChannel, nonce);
        
        
        
        in(~deviceChannel, <id, blob>);
        event ReceivedBlob(blob);

        out(~serverChannel, <id, blob>);

        
        
        in(~serverChannel, veredict);

        if veredict = <id, 'veredictOK'> then
            event VeredictOK(id);
            new ~secret;
            event YourServerSends(~secret);
            out(~deviceChannel, ~secret)
        else
            event VeredictNoOK(id)
    
    )

let AttestServer =
    !(
        new ~nonce;
        event GeneratedNonce(~nonce);
        out(~serverChannel, ~nonce);
        
        in(~serverChannel, <id, blob>);
        
        event Debug1();
        if <id, 'nonRooted', ~nonce> = check_rep(blob, <'TrustZone', id>) then
            event AttestServerVeredictOk(id);
            out(~serverChannel, <id, 'veredictOK'>)
        else
            event AttestServerVeredictNotOk(id);
            out(~serverChannel, <id, 'veredictNotOK'>)
        
        
    )


new ~serverChannel;
new ~deviceChannel;
new ~secureChannel;
//new ~ssk_AttestServer;
//let spk_AttestServer = pk(~ssk_AttestServer) in
//out(spk_AttestServer);

(Device | YourServer | AttestServer)

lemma types [sources]:
    " 
    (All nonce #i.
       ReceivedNonce(nonce) @ i
        ==>
            ( 
                (Ex #j. KU(nonce) @ j & j < i)
                | (Ex #j. GeneratedNonce( nonce ) @ j)
            )
    )"
    /*
lemma types2 [sources]:
   "(All id #i.
       ReceivedID(id) @ i
        ==>
            ( 
                (Ex #j. KU(id) @ j & j < i)
                | (Ex #j. GenerateID(id) @ j)
            )
    )
    "
lemma types3 [sources]:  
    "(All blob #i.
       ReceivedBlob(blob) @ i
        ==>
            ( 
                (Ex #j. KU(blob) @ j & j < i)
                | (Ex #j. GeneratedBlob(blob) @ j)
            )
    )
    "
    */



lemma Debug1:
    exists-trace
    "Ex #i. Debug1()@i"



// Ideally should be true
// but it will be falsified
/*lemma NotRepackedAppReceivesSecret:
    "(not (Ex secret #i #j. YourServerSends(secret)@i & RepackedAppReceives(secret)@j))"
*/

// Ideally should be true
// It will be verified
//lemma NotRootedDeviceReceivesSecret:
//    "(not Ex secret #i #j. YourServerSends(secret)@i & YourAppReceives(secret)@j & DeviceIsRooted()"


//"YourAppReceives(..) ==> YourServerSends(secret) & not DeviceIsRooted()"

//"RepackedAppReceives(..) ==> YourServerSends(secret) & not DeviceIsRooted()"

// rooted device + repacked app  ---> youwserver will not send secret



// nonrooted device + repacked app    leak secret, leak blob

// rooted device + repacked app uses blob to receive secret.
    
    
    
end


