theory SafetynetF
begin

builtins:
    locations-report,
    symmetric-encryption

let RootKit =
    //can receve any infomration from an adversary
    in(status);
    insert 'device', 'rooted';
    event DeviceStatus(status);
    0

let PlayService =
    !(
        in(~secureChannel,<nonceSW,hash>);
        
        lookup <'device'> as measurement in
        if measurement = 'valid' then
            event Debug2_S1();
            let blob = senc(~key,<nonceSW,hash,'verdict_OK'>) in
            out(~secureChannel2,blob)
        else
            event Debug2_S2();
            let blob = senc(~key,<nonceSW,hash,'verdict_INVALID'>) in
            out(~secureChannel2,<nonceSW,hash,blob>);
            out(<~key,blob,nonceSW>)
       
    )
 
let YourApp =
    !(
        event AppStarts(~id);
        in(~deviceChannel, nonceA);

        event Debug1();
        event ReceivedNonce(nonceA);
        
        out(~secureChannel,<nonceA,'hash'>);
        
        in(~secureChannel2,<nonceA,'hash',blobA>);
        event Debug2();

        out(~deviceChannel2,<nonceA, blobA>);
        
        in(~deviceChannel3, <nonceA, blobA, secretA>);
        event AppReceives(secretA);
        event Debug3();
        0

    )

let RepackedApp =
    !(
        //can receve any infomration from an adversary
        in(<nonceR, blobR>);

        out(~deviceChannel2, <nonceR, blobR>);
        
        in(~deviceChannel3, <nonceR, blobR, secretR>);
        out(secretR);
        event RepackedAppReceives(secretR);
        event Debug3R();
        0
    )

let Server = 
    !(
        new ~nonce;
        new ~secret;        
        event GeneratedSecret(~nonce);
        event GeneratedNonce(~nonce);
        event GeneratedKey(~key);

        out(~deviceChannel, ~nonce);
       
        in(~deviceChannel2,<~nonce,senc(~key,<~nonce,hash,verdict>)>);

        if verdict = 'verdict_OK' then
            if hash = 'hash' then
                event Debug4();
                out(~deviceChannel3,<~nonce,senc(~key,<~nonce,verdict>),~secret>)
            else
                 event Debug5()
        else
            event Debug6();
        
        
        0
       
    )



new ~deviceChannel;
new ~deviceChannel2;
new ~deviceChannel3;

new ~secureChannel;
new ~secureChannel2;

new ~key;


new ~id;

insert 'device', 'valid';

(!Server |!PlayService| !YourApp | !RootKit |!RepackedApp)


lemma Debug1: exists-trace "Ex #i. Debug1()@i"
lemma Debug2: exists-trace "Ex #i. Debug2()@i"
lemma Debug3: exists-trace "Ex #i. Debug3()@i"

lemma Debug4: exists-trace "Ex #i. Debug4()@i"
lemma Debug5: exists-trace "Ex #i. Debug5()@i"
lemma Debug6: exists-trace "Ex #i. Debug5()@i"

lemma Debug2_S1: exists-trace "Ex #i. Debug2_S1()@i"
lemma Debug2_S2: exists-trace "Ex #i. Debug2_S2()@i"

//lemma test: exists-trace "Ex nonce key #i #j #ki #kj. GeneratedNonce(nonce)@i & GeneratedKey(key)@j & K(nonce)@ki & K(key)@kj"

end


