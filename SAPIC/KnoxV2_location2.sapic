theory KnoxV2_location2
begin

builtins:
    locations-report    


let SecureWorld =
    !(
        in(~secureChannel,nonceSW);
        
        //lock <'device', ~id>;
        let blob = report(<~id, 'nonRooted', nonceSW>) in
        //unlock <'device', ~id>;
        
        out(~secureChannel2,blob);
        
        0
    )@<'TrustZone', ~id>
 
let YourApp =
    !(
        event RepackedAppStarts(~id);
        in(~deviceChannel, nonceA);

        event Debug1A();
        event ReceivedNonce(nonceA);
        
        out(~secureChannel,nonceA);
        
        in(~secureChannel2,blobA);
        event Debug2A();

        out(~deviceChannel2, blobA);
        
        in(~deviceChannel3, secretA);
        event AppReceives(secretA);
        event Debug3A();
        

        0

    )

let RepackedApp =
    !(
        event RepackedAppStarts(~id);
        in(~deviceChannel, nonceRA);

        event Debug1();
        event ReceivedNonce(nonceRA);
        
        out(~secureChannel,nonceRA);
        
        in(~secureChannel2,blobRA);
        event Debug2();

        out(~deviceChannel2, blobRA);
        
        in(~deviceChannel3, secretRA);
        event RepackedAppReceives(secretRA);
        event Debug3();
        

        0

    )
    
    


let Server = 
    !(
        new ~nonce;
        new ~secret;
        event GeneratedNonce(~nonce);

        out(~deviceChannel, ~nonce);
       
        in(~deviceChannel2,blob);
        out(~deviceChannel3, ~secret);
        event Debug4();
        if <~id, 'nonRooted', ~nonce> = check_rep(blob, <'TrustZone', ~id>)  then
            event Debug5();
            out(~deviceChannel3, ~secret);
            0
        else
            event Debug6();
            0
        //out(~serverChannel3, <id, 'veredictOK'>);
       
    )

//TODO: labels instead of fresh
//Todo : follow up the nonce

/*
ForAll n. ReceiveNonce(n) ==> GenerateNonce(n)
it is a secuity property
for all received nonce , there must be a generated before. 
the lemma sayes nothing if you didn't receve a nonce (nonc ecan be lost).

Exists n. ReceiveNonce(n) & GenerateNonce(n)
reachiblity property

*/

new ~deviceChannel;
new ~deviceChannel2;
new ~deviceChannel3;

new ~secureChannel;
new ~secureChannel2;

new ~key;
new ~id;


(!Server |!SecureWorld| !RepackedApp )


lemma Debug1: exists-trace "Ex #i. Debug1()@i"
lemma Debug2: exists-trace "Ex #i. Debug2()@i"
lemma Debug3: exists-trace "Ex #i. Debug3()@i"
/*
lemma Debug1A: exists-trace "Ex #i. Debug1A()@i"
lemma Debug2A: exists-trace "Ex #i. Debug2A()@i"
lemma Debug3A: exists-trace "Ex #i. Debug3A()@i"
*/
lemma Debug4: exists-trace "Ex #i. Debug4()@i"
lemma Debug5: exists-trace "Ex #i. Debug5()@i"
lemma Debug6: exists-trace "Ex #i. Debug6()@i"

lemma nonceTest: exists-trace "Ex n #i #j. ReceivedNonce(n)@i & GeneratedNonce(n)@j"
end


