
theory TestPriv
begin


let Alice =
    new ~nonceA;
    !(
        event GeneratedNonceA( ~nonceA ); // nonce generated event for Alice
        out(~tlsA,~nonceA);
        in(~tlsA,nonceB);
         event Debug();
        0
        
    )

let Bob =
    new ~nonceB;
    !(
        event GeneratedNonceB( ~nonceB ); // nonce generated event for Bob
        in(~tlsB,nonceA);
        out(~tlsB,~nonceB);
        0

    )

let Charlie =
    !(
        in(~tlsA,nonceAC);
        //event ReceivedNonceA(nonceAC);
        
        event GeneratedNonceEXA(nonceAC);
        //send it to dave
        out(~tlsC,nonceAC);
        in(~tlsC,nonceAC);

        out(~tlsB,nonceAC); //<---- where partial deconsturction used to be

        
        in(~tlsB,nonceBC);
        //event ReceivedNonceB(nonceBC);
        
        event GeneratedNonceEXB(nonceBC);
        out(~tlsC,nonceBC);
        in(~tlsC,nonceBC);        
        
        out(~tlsA,nonceBC); //<----  where partial deconsturction used to be

        
       
        0
    )

let Dave =

    !(

        in(~tlsC, nonce);
        event ReceivedNonce(nonce);
        out(nonce);
        out(~tlsC, nonce);
        0

    )

new ~id;
new ~tlsA;
new ~tlsB;
new ~tlsC;

(!Alice ||!Bob ||Charlie || Dave )


lemma types [sources]:
    " 
    (All nonce #i.
       ReceivedNonce(nonce) @ i
        ==>
            ( 
                (Ex #j. KU(nonce) @ j & j < i)
                | (Ex #j. GeneratedNonceEXA( nonce ) @ j)
                | (Ex #j. GeneratedNonceEXB( nonce ) @ j)
            )
    )
   "


lemma Debug:
    exists-trace
    "Ex #i. Debug()@i"

end

/*
==============================================================================
summary of summaries:

analyzed: KnoxV2.sapic

  Correctness_D (exists-trace): verified (9 steps)

==============================================================================
*/