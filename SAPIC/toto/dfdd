theory Safetynet2
begin

builtins:
    locations-report,
    symmetric-encryption

let RootStatusManager =
    in(status);
    insert 'device', 'rooted';
    event DeviceStatus(status);
    0

let PlayService =
    !(
        in(~secureChannel,nonceSW);
        
        lookup <'device'> as measurement in
        if measurement = 'valid' then
            event Debug2_S1();
            let blob = senc(~key,<nonceSW,'verdict_OK'>) in
            out(~secureChannel2,blob)
        else
            event Debug2_S2();
            let blob = senc(~key,<nonceSW,'verdict_INVALID'>) in
            out(~secureChannel2,blob);
            out(~key)
       
    )
 
let YourApp =
    !(
        event RepackedAppStarts(~id);
        in(~deviceChannel, nonceA);
        out(nonceA);
        event Debug1A();
        event ReceivedNonce(nonceA);
        
        out(~secureChannel,nonceA);
        
        in(~secureChannel2,blobA);
        event Debug2A();

        out(~deviceChannel2, blobA);
        
        in(~deviceChannel3, secretA);
        event AppReceives(secretA);
        event Debug3A();
        

        0

    )

let adversay=
    in(input);
    out(~deviceChannel2, blob);

let RepackedApp =
    !(
        
        in(keyPlayService);
        in(nonce);
        let blob = senc(keyPlayService,<nonceRA,'verdict_OK'>) in

        out(~deviceChannel2, blob);
        
        in(~deviceChannel3, secretRA);
        event RepackedAppReceives(secretRA);
        event Debug3();
        

        0

    )
    
    


let Server = 
    !(
        new ~nonce;
        new ~secret;
        event GeneratedNonce(~nonce);

        out(~deviceChannel, ~nonce);
       
        in(~deviceChannel2,senc(~key,<~nonce,verdict>));

        if verdict = 'verdict_OK' then
            event Debug4();
            out(~deviceChannel3, ~secret)
        else
            event Debug5();
        
        
        0
        //out(~serverChannel3, <id, 'veredictOK'>);
       
    )

// Exists k, n. GenerateNonce(n) & GenerateKey(k) & K(n) & K(k)


new ~deviceChannel;
new ~deviceChannel2;
new ~deviceChannel3;

new ~secureChannel;
new ~secureChannel2;

new ~key;
new ~id;

insert 'device', 'valid';

(!Server |!PlayService| !RepackedApp | !RootStatusManager)


lemma Debug1: exists-trace "Ex #i. Debug1()@i"
lemma Debug2: exists-trace "Ex #i. Debug2()@i"
lemma Debug3: exists-trace "Ex #i. Debug3()@i"
/*
lemma Debug1A: exists-trace "Ex #i. Debug1A()@i"
lemma Debug2A: exists-trace "Ex #i. Debug2A()@i"
lemma Debug3A: exists-trace "Ex #i. Debug3A()@i"
*/
lemma Debug4: exists-trace "Ex #i. Debug4()@i"
lemma Debug5: exists-trace "Ex #i. Debug5()@i"

lemma Debug2_S1: exists-trace "Ex #i. Debug2_S1()@i"
lemma Debug2_S2: exists-trace "Ex #i. Debug2_S2()@i"
    
end


